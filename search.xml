<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Python--借助OpenCV在图片上显示文字及保存]]></title>
    <url>%2Farticle%2FPythonOpenCVPutText.html</url>
    <content type="text"><![CDATA[为方便以后开发查阅，特记录此相关代码。所要实现的功能： 在图片上显示文字及保存 所调用的函数12345678910111213cv2.putText(img, text, (40, 50), cv2.FONT_HERSHEY_PLAIN, 2.0, (0, 0, 255), 2)# putText 定义如下：void cv::putText( cv::Mat&amp; img, // 待绘制的图像 const string&amp; text, // 待绘制的文字 cv::Point origin, // 文本框的左下角 int fontFace, // 字体 (如cv::FONT_HERSHEY_PLAIN) double fontScale, // 尺寸因子，值越大文字越大 cv::Scalar color, // 线条的颜色（RGB） int thickness = 1, // 线条宽度 int lineType = 8, // 线型（4邻域或8邻域，默认8邻域） bool bottomLeftOrigin = false // true=’origin at lower left’ ); fontFace 字体类型 描述 CV_FONT_HERSHEY_SIMPLEX 正常尺寸sanserif字体 CV_FONT_HERSHEY_PLAIN 小尺寸sanserif字体 CV_FONT_HERSHEY_DUPLEX 正常尺寸sanserif, 比 CV_FONT_HERSHEY_SIMPLEX更复杂 CV_FONT_HERSHEY_COMPLEX 正常尺寸serif, 比 CV_FONT_HERSHEY_DUPLEX更复杂 CV_FONT_HERSHEY_TRIPLEX 正常尺寸serif, 比CV_FONT_HERSHEY_COMPLEX更复杂 CV_FONT_HERSHEY_COMPLEX_SMALL 小尺寸的 CV_FONT_HERSHEY_COMPLEX CV_FONT_HERSHEY_SCRIPT_SIMPLEX 手写风格 CV_FONT_HERSHEY_SCRIPT_COMPLEX 比CV_FONT_HERSHEY_SCRIPT_SIMPLEX更复杂的风格 程序示例：123456789101112131415161718import cv2img = cv2.imread('1.png')while True: W = 3.752 H = 4.382 L = 8.342 W = round(W, 2) # round函数将W保留两位小数 H = round(H, 2) L = round(L, 2) text = "W:"+str(W)+" " + "H:"+str(H) + " " + "L:"+str(L) cv2.putText(img, text, (40, 50), cv2.FONT_HERSHEY_PLAIN, 2.0, (0, 0, 255), 2) cv2.imshow("ori_image", img) key = cv2.waitKey(delay=1) if key == 27: cv2.destroyAllWindows() cv2.imwrite("new_img.png", img) break]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TensorFlow Object detection API教程之三：测试自己的模型]]></title>
    <url>%2Farticle%2FTensorFlowObjectDetectionAPITutorial3.html</url>
    <content type="text"><![CDATA[TensorFlow Object detection API 教程系列： TensorFlow Object detection API 教程之一：Object detection API安装 TensorFlow Object detection API 教程之二：训练自己的模型 TensorFlow Object detection API 教程之三：测试自己的模型 在这一节，我们将要测试我们自己的模型，看一看训练的模型能否达到我们预期的效果。 将ckpt模型文件保存为pb模型文件首先我们需要导出计算图(Inference Graph)，在models/research/object_detection/目录中，官方提供的export_inference_graph.py脚本可以帮助我们轻松地去完成该操作。 找到一个想要导出pb文件的checkpoint，在models/research/object_detection/路径下执行命令 ： 12345python3 export_inference_graph.py \ --input_type image_tensor \ --pipeline_config_path training/ssd_mobilenet_v1_pets.config \ --trained_checkpoint_prefix training/model.ckpt-10856 \ --output_directory mac_n_cheese_inference_graph input_type：保持模型，不用修改。 pipeline_config_path：神经网络的参数设置文件路径，格式如上。 trained_checkpoint_prefix：训练后最大步长的ckpt文件的目录，格式如上。 output_directory：输入文件目录 如执行以上命令时报错为：no module named &#39;nets&#39;，进入models/research/路径下执行: 12# From tensorflow/models/research/export PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim 读取pb模型文件 读取路径： 123456ROOT_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir))# Path to frozen detection graph. This is the actual model that is used for the object detection.PATH_TO_CKPT = ROOT_PATH + '/include/hand_inference_graph/frozen_inference_graph.pb'# List of the strings that is used to add correct label for each box.PATH_TO_LABELS = ROOT_PATH + '/include/hand_inference_graph/hand_label_map.pbtxt'NUM_CLASSES = 1 加载模型： 12345678# Loading the modeldetection_graph = tf.Graph()with detection_graph.as_default(): od_graph_def = tf.GraphDef() with tf.gfile.GFile(PATH_TO_CKPT, 'rb') as fid: serialized_graph = fid.read() od_graph_def.ParseFromString(serialized_graph) tf.import_graph_def(od_graph_def, name='') 加载标签： 1234# Loading label maplabel_map = label_map_util.load_labelmap(PATH_TO_LABELS)categories = label_map_util.convert_label_map_to_categories(label_map, max_num_classes=NUM_CLASSES, use_display_name=True)category_index = label_map_util.create_category_index(categories) 读入图片： 123456789# For the sake of simplicity we will use only 2 images:# image1.jpg# image2.jpg# If you want to test the code with your images, just add path to the images to the TEST_IMAGE_PATHS.PATH_TO_TEST_IMAGES_DIR = 'test_images'TEST_IMAGE_PATHS = [ os.path.join(PATH_TO_TEST_IMAGES_DIR, 'image&#123;&#125;.jpg'.format(i)) for i in range(1, 3) ]# Size, in inches, of the output images.IMAGE_SIZE = (12, 8) 检测示例 完整代码点击查看官方代码 参考：[1]https://pythonprogramming.net/testing-custom-object-detector-tensorflow-object-detection-api-tutorial/?completed=/training-custom-objects-tensorflow-object-detection-api-tutorial/[2]https://github.com/tensorflow/models/blob/master/research/object_detection/object_detection_tutorial.ipynb]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Tensorflow</tag>
        <tag>Object detection</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python--判断字符串是否包含子字符串]]></title>
    <url>%2Farticle%2FPythonFindStrings.html</url>
    <content type="text"><![CDATA[为方便以后开发查阅，特记录此相关代码。所要实现的功能： 判断字符串是否包含子字符串 方法一：In12345string = 'helloworld'if 'world' in string: print('Exist')else: print('Not exist') 方法二：Find12345string = 'helloworld'if string.find(’world‘) &gt; -1: print('Exist')else: print('Not exist') 方法三：Index1234if string.index(’world‘) &gt; -1: #因为-1的意思代表没有找到字符，所以判断&gt;-1就代表能找到 print('Exist')else: print('Not exist') 但是，如果没找到，程序会抛出异常]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python--保存图片到文件夹]]></title>
    <url>%2Farticle%2FPythonSaveImage.html</url>
    <content type="text"><![CDATA[为方便以后开发查阅，特记录此相关代码。所要实现的功能： 将图片保存于指定文件夹中，可指定图片后缀 代码如下：12345678910111213def save_img(img, file_name,file_path='img'): # Save image to the file_path '\img' if not os.path.exists(file_path): print (file_path,'not exist') os.makedirs(file_path) # Image suffix # file_suffix = 'jpg' # Join image name # 项目中给定的图片名为“hiking_125.jpg_0”，需命名切片 filename = '&#123;&#125;&#123;&#125;&#123;&#125;'.format(file_path, os.sep, file_name[:-2]) # filename = file_name[:-2] # print(filename) plt.imsave(filename, img) 附plt常用保存图片的相应代码：plt.savefig(‘file_name’) 保存带有坐标的图像plt.imsave(‘file_name’, img) 保存原始图像]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ROS启动多launch文件的小技巧]]></title>
    <url>%2Farticle%2FROSLaunchTips.html</url>
    <content type="text"><![CDATA[在ROS工程中经常需要启动好几个launch文件，比较不方便，有下面两种方法可以更高效些： 重写一个大型的launch文件，将所有的节点的启动配置信息都包含进去。 通过bash写一个xxx.sh文件，将命令行一起写入一个脚本。 launch文件中则如下进行设置：pkg对应文件的包名。 type是CMakeList.txt中对应该文件add_executable(pcan_test src/pcan_test)中可执行文件的名称，在python中则是文件名，因为Python的可执行文件就是文件本身（解释性语言，同Matlab），所以若用C++编程不要误写为文件名全称。 name表示节点启动后的名称，该名称会覆盖ros::init中初始化的名称。 output后参数表示从屏幕输出打印信息，否则打印信息会存储到某个临时文件里。 1234567&lt;launch&gt; &lt;node pkg="uav_dl" name="position_control" type="position_control.py" output="screen" /&gt; &lt;node pkg="uav_dl" name="action_control" type="action_control.py" output="screen" /&gt; &lt;node pkg="uav_dl" name="goto_position_server" type="goto_position_server.py" output="screen" /&gt; &lt;node pkg="uav_dl" name="detect_object_server" type="detect_object_server.py" output="screen" /&gt; &lt;node pkg="uav_dl" name="tensorflow_detection" type="tensorflow_detection.py" output="screen" /&gt;&lt;/launch&gt; 注：只需要在src下建立launch文件夹，然后在其中创建launch文件即可，不需要做其他工作。 参数里name是ros::param::get()中第一个字符串去掉“~”后的名称，launch会在运行时进行查找匹配，type是变量类型，value是具体值。以下launch文件（包含私有变量和公有变量）。 12345678910111213141516171819202122232425262728293031323334353637&lt;launch&gt; &lt;arg name="fcu_url" default="serial:///dev/ttyACM0:921600" /&gt; &lt;arg name="gcs_url" default="udp://:14556@192.168.150.2:14550" /&gt; &lt;arg name="tgt_system" default="1" /&gt; &lt;arg name="tgt_component" default="50" /&gt; &lt;node name="mavros" pkg="mavros" type="mavros_node" output="screen"&gt; &lt;param name="fcu_url" value="$(arg fcu_url)" /&gt; &lt;param name="gcs_url" value="$(arg gcs_url)" /&gt; &lt;param name="target_system_id" value="$(arg tgt_system)" /&gt; &lt;param name="target_component_id" value="$(arg tgt_component)" /&gt; &lt;rosparam command="load" file="$(find mavros)/launch/px4_blacklist.yaml" /&gt; &lt;!-- enable heartbeat send and reduce timeout --&gt; &lt;param name="conn_heartbeat" value="5.0" /&gt; &lt;param name="conn_timeout" value="5.0" /&gt; &lt;!-- automatically start mavlink on USB --&gt; &lt;param name="startup_px4_usb_quirk" value="true" /&gt; &lt;/node&gt; &lt;node name="camera" pkg="usb_cam" type="usb_cam_node"&gt; &lt;param name="video_device" value="/dev/video0" /&gt; &lt;param name="image_width" value="800" /&gt; &lt;param name="image_height" value="600" /&gt; &lt;param name="pixel_format" value="mjpeg" /&gt; &lt;param name="framerate" value="30" /&gt; &lt;param name="camera_frame_id" value="webcam" /&gt; &lt;/node&gt; &lt;node name="viewer" pkg="image_view" type="image_view"&gt; &lt;remap from="image" to="/camera/image_raw" /&gt; &lt;/node&gt; &lt;/launch&gt; 在ubuntu下进行节点启动顺序控制的简单策略就是通过shell实现新建文件后命名为xxx.sh 123456789#!/bin/bashroslaunch bhand_controller bhand_controller.launch &amp;sleep 5echo "bhand controller starting success!" roslaunch beginner_tutorials bhand_force_control.launch &amp;sleep 0.1waitexit 0 代码解释：第一行表示用bash执行，sleep表示演示，echo用来输出一定内容，注意不要忘记句子后的”&amp;“符号。注：若ROS的关键词不能在终端识别，需先source下ROS环境。 节点启动顺序控制策略就是如果某个节点必须先执行，可以单独为其写一个launch文件，然后通过shell控制先行启动。 编写保存后，在终端要给xxx.sh执行权限，sudo chmod a+x xxx.sh，之后可通过./xxx.sh进行启动，xxx代表任意字符。有关Ubuntu shell的其他操作，可以自行查询相关资料。 Debugs1234# Bug:ERROR: cannot launch node of type [ros_tensorflow/imgTalker.py]: can't locate node [imgTalker.py] in package [ros_tensorflow]# Debug: 修改为可执行sudo chmod +x imgTalker.py]]></content>
      <categories>
        <category>ROS</category>
      </categories>
      <tags>
        <tag>ROS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Kreas实现经典CNN]]></title>
    <url>%2Farticle%2FKerasWithCNNNetworks.html</url>
    <content type="text"><![CDATA[Keras是搭建深度神经网络很好用的工具，集成度高，做深度学习的原型非常方便，可选择使用Theano或Tensorflow作为后端，非常适合学习和研究深度学习。 可以用 Keras 进行实验和测试，然后迁移到 Caffe 1 。 LeNet12345678910111213141516171819202122232425262728293031323334353637#coding=utf-8from keras.models import Sequentialfrom keras.layers import Dense,Flattenfrom keras.layers.convolutional import Conv2D,MaxPooling2Dfrom keras.utils.np_utils import to_categoricalimport cPickleimport gzipimport numpy as npseed = 7np.random.seed(seed) data = gzip.open(r'/media/wmy/document/BigData/kaggle/Digit Recognizer/mnist.pkl.gz')train_set,valid_set,test_set = cPickle.load(data)#train_x is [0,1]train_x = train_set[0].reshape((-1,28,28,1))train_y = to_categorical(train_set[1]) valid_x = valid_set[0].reshape((-1,28,28,1))valid_y = to_categorical(valid_set[1]) test_x = test_set[0].reshape((-1,28,28,1))test_y = to_categorical(test_set[1]) model = Sequential()model.add(Conv2D(32,(5,5),strides=(1,1),input_shape=(28,28,1),padding='valid',activation='relu',kernel_initializer='uniform'))model.add(MaxPooling2D(pool_size=(2,2)))model.add(Conv2D(64,(5,5),strides=(1,1),padding='valid',activation='relu',kernel_initializer='uniform'))model.add(MaxPooling2D(pool_size=(2,2)))model.add(Flatten())model.add(Dense(100,activation='relu'))model.add(Dense(10,activation='softmax'))model.compile(optimizer='sgd',loss='categorical_crossentropy',metrics=['accuracy'])model.summary() model.fit(train_x,train_y,validation_data=(valid_x,valid_y),batch_size=20,epochs=20,verbose=2)#[0.031825309940411217, 0.98979999780654904]print model.evaluate(test_x,test_y,batch_size=20,verbose=2) AlexNet1234567891011121314151617181920212223242526#coding=utf-8from keras.models import Sequentialfrom keras.layers import Dense,Flatten,Dropoutfrom keras.layers.convolutional import Conv2D,MaxPooling2Dfrom keras.utils.np_utils import to_categoricalimport numpy as npseed = 7np.random.seed(seed) model = Sequential()model.add(Conv2D(96,(11,11),strides=(4,4),input_shape=(227,227,3),padding='valid',activation='relu',kernel_initializer='uniform'))model.add(MaxPooling2D(pool_size=(3,3),strides=(2,2)))model.add(Conv2D(256,(5,5),strides=(1,1),padding='same',activation='relu',kernel_initializer='uniform'))model.add(MaxPooling2D(pool_size=(3,3),strides=(2,2)))model.add(Conv2D(384,(3,3),strides=(1,1),padding='same',activation='relu',kernel_initializer='uniform'))model.add(Conv2D(384,(3,3),strides=(1,1),padding='same',activation='relu',kernel_initializer='uniform'))model.add(Conv2D(256,(3,3),strides=(1,1),padding='same',activation='relu',kernel_initializer='uniform'))model.add(MaxPooling2D(pool_size=(3,3),strides=(2,2)))model.add(Flatten())model.add(Dense(4096,activation='relu'))model.add(Dropout(0.5))model.add(Dense(4096,activation='relu'))model.add(Dropout(0.5))model.add(Dense(1000,activation='softmax'))model.compile(loss='categorical_crossentropy',optimizer='sgd',metrics=['accuracy'])model.summary() ZF Net1234567891011121314151617181920212223242526#coding=utf-8from keras.models import Sequentialfrom keras.layers import Dense,Flatten,Dropoutfrom keras.layers.convolutional import Conv2D,MaxPooling2Dfrom keras.utils.np_utils import to_categoricalimport numpy as npseed = 7np.random.seed(seed) model = Sequential()model.add(Conv2D(96,(7,7),strides=(2,2),input_shape=(224,224,3),padding='valid',activation='relu',kernel_initializer='uniform'))model.add(MaxPooling2D(pool_size=(3,3),strides=(2,2)))model.add(Conv2D(256,(5,5),strides=(2,2),padding='same',activation='relu',kernel_initializer='uniform'))model.add(MaxPooling2D(pool_size=(3,3),strides=(2,2)))model.add(Conv2D(384,(3,3),strides=(1,1),padding='same',activation='relu',kernel_initializer='uniform'))model.add(Conv2D(384,(3,3),strides=(1,1),padding='same',activation='relu',kernel_initializer='uniform'))model.add(Conv2D(256,(3,3),strides=(1,1),padding='same',activation='relu',kernel_initializer='uniform'))model.add(MaxPooling2D(pool_size=(3,3),strides=(2,2)))model.add(Flatten())model.add(Dense(4096,activation='relu'))model.add(Dropout(0.5))model.add(Dense(4096,activation='relu'))model.add(Dropout(0.5))model.add(Dense(1000,activation='softmax'))model.compile(loss='categorical_crossentropy',optimizer='sgd',metrics=['accuracy'])model.summary() GoogLeNet123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#coding=utf-8from keras.models import Modelfrom keras.layers import Input,Dense,Dropout,BatchNormalization,Conv2D,MaxPooling2D,AveragePooling2D,concatenatefrom keras.layers.convolutional import Conv2D,MaxPooling2D,AveragePooling2Dimport numpy as npseed = 7np.random.seed(seed) def Conv2d_BN(x, nb_filter,kernel_size, padding='same',strides=(1,1),name=None): if name is not None: bn_name = name + '_bn' conv_name = name + '_conv' else: bn_name = None conv_name = None x = Conv2D(nb_filter,kernel_size,padding=padding,strides=strides,activation='relu',name=conv_name)(x) x = BatchNormalization(axis=3,name=bn_name)(x) return x def Inception(x,nb_filter): branch1x1 = Conv2d_BN(x,nb_filter,(1,1), padding='same',strides=(1,1),name=None) branch3x3 = Conv2d_BN(x,nb_filter,(1,1), padding='same',strides=(1,1),name=None) branch3x3 = Conv2d_BN(branch3x3,nb_filter,(3,3), padding='same',strides=(1,1),name=None) branch5x5 = Conv2d_BN(x,nb_filter,(1,1), padding='same',strides=(1,1),name=None) branch5x5 = Conv2d_BN(branch5x5,nb_filter,(1,1), padding='same',strides=(1,1),name=None) branchpool = MaxPooling2D(pool_size=(3,3),strides=(1,1),padding='same')(x) branchpool = Conv2d_BN(branchpool,nb_filter,(1,1),padding='same',strides=(1,1),name=None) x = concatenate([branch1x1,branch3x3,branch5x5,branchpool],axis=3) return x inpt = Input(shape=(224,224,3))#padding = 'same'，填充为(步长-1）/2,还可以用ZeroPadding2D((3,3))x = Conv2d_BN(inpt,64,(7,7),strides=(2,2),padding='same')x = MaxPooling2D(pool_size=(3,3),strides=(2,2),padding='same')(x)x = Conv2d_BN(x,192,(3,3),strides=(1,1),padding='same')x = MaxPooling2D(pool_size=(3,3),strides=(2,2),padding='same')(x)x = Inception(x,64)#256x = Inception(x,120)#480x = MaxPooling2D(pool_size=(3,3),strides=(2,2),padding='same')(x)x = Inception(x,128)#512x = Inception(x,128)x = Inception(x,128)x = Inception(x,132)#528x = Inception(x,208)#832x = MaxPooling2D(pool_size=(3,3),strides=(2,2),padding='same')(x)x = Inception(x,208)x = Inception(x,256)#1024x = AveragePooling2D(pool_size=(7,7),strides=(7,7),padding='same')(x)x = Dropout(0.4)(x)x = Dense(1000,activation='relu')(x)x = Dense(1000,activation='softmax')(x)model = Model(inpt,x,name='inception')model.compile(loss='categorical_crossentropy',optimizer='sgd',metrics=['accuracy'])model.summary() VGG-131234567891011121314151617181920212223242526272829303132#coding=utf-8from keras.models import Sequentialfrom keras.layers import Dense,Flatten,Dropoutfrom keras.layers.convolutional import Conv2D,MaxPooling2Dimport numpy as npseed = 7np.random.seed(seed) model = Sequential()model.add(Conv2D(64,(3,3),strides=(1,1),input_shape=(224,224,3),padding='same',activation='relu',kernel_initializer='uniform'))model.add(Conv2D(64,(3,3),strides=(1,1),padding='same',activation='relu',kernel_initializer='uniform'))model.add(MaxPooling2D(pool_size=(2,2)))model.add(Conv2D(128,(3,2),strides=(1,1),padding='same',activation='relu',kernel_initializer='uniform'))model.add(Conv2D(128,(3,3),strides=(1,1),padding='same',activation='relu',kernel_initializer='uniform'))model.add(MaxPooling2D(pool_size=(2,2)))model.add(Conv2D(256,(3,3),strides=(1,1),padding='same',activation='relu',kernel_initializer='uniform'))model.add(Conv2D(256,(3,3),strides=(1,1),padding='same',activation='relu',kernel_initializer='uniform'))model.add(MaxPooling2D(pool_size=(2,2)))model.add(Conv2D(512,(3,3),strides=(1,1),padding='same',activation='relu',kernel_initializer='uniform'))model.add(Conv2D(512,(3,3),strides=(1,1),padding='same',activation='relu',kernel_initializer='uniform'))model.add(MaxPooling2D(pool_size=(2,2)))model.add(Conv2D(512,(3,3),strides=(1,1),padding='same',activation='relu',kernel_initializer='uniform'))model.add(Conv2D(512,(3,3),strides=(1,1),padding='same',activation='relu',kernel_initializer='uniform'))model.add(MaxPooling2D(pool_size=(2,2)))model.add(Flatten())model.add(Dense(4096,activation='relu'))model.add(Dropout(0.5))model.add(Dense(4096,activation='relu'))model.add(Dropout(0.5))model.add(Dense(1000,activation='softmax'))model.compile(loss='categorical_crossentropy',optimizer='sgd',metrics=['accuracy'])model.summary() VGG-161234567891011121314151617181920212223242526272829303132333435#coding=utf-8from keras.models import Sequentialfrom keras.layers import Dense,Flatten,Dropoutfrom keras.layers.convolutional import Conv2D,MaxPooling2Dimport numpy as npseed = 7np.random.seed(seed) model = Sequential()model.add(Conv2D(64,(3,3),strides=(1,1),input_shape=(224,224,3),padding='same',activation='relu',kernel_initializer='uniform'))model.add(Conv2D(64,(3,3),strides=(1,1),padding='same',activation='relu',kernel_initializer='uniform'))model.add(MaxPooling2D(pool_size=(2,2)))model.add(Conv2D(128,(3,2),strides=(1,1),padding='same',activation='relu',kernel_initializer='uniform'))model.add(Conv2D(128,(3,3),strides=(1,1),padding='same',activation='relu',kernel_initializer='uniform'))model.add(MaxPooling2D(pool_size=(2,2)))model.add(Conv2D(256,(3,3),strides=(1,1),padding='same',activation='relu',kernel_initializer='uniform'))model.add(Conv2D(256,(3,3),strides=(1,1),padding='same',activation='relu',kernel_initializer='uniform'))model.add(Conv2D(256,(3,3),strides=(1,1),padding='same',activation='relu',kernel_initializer='uniform'))model.add(MaxPooling2D(pool_size=(2,2)))model.add(Conv2D(512,(3,3),strides=(1,1),padding='same',activation='relu',kernel_initializer='uniform'))model.add(Conv2D(512,(3,3),strides=(1,1),padding='same',activation='relu',kernel_initializer='uniform'))model.add(Conv2D(512,(3,3),strides=(1,1),padding='same',activation='relu',kernel_initializer='uniform'))model.add(MaxPooling2D(pool_size=(2,2)))model.add(Conv2D(512,(3,3),strides=(1,1),padding='same',activation='relu',kernel_initializer='uniform'))model.add(Conv2D(512,(3,3),strides=(1,1),padding='same',activation='relu',kernel_initializer='uniform'))model.add(Conv2D(512,(3,3),strides=(1,1),padding='same',activation='relu',kernel_initializer='uniform'))model.add(MaxPooling2D(pool_size=(2,2)))model.add(Flatten())model.add(Dense(4096,activation='relu'))model.add(Dropout(0.5))model.add(Dense(4096,activation='relu'))model.add(Dropout(0.5))model.add(Dense(1000,activation='softmax'))model.compile(loss='categorical_crossentropy',optimizer='sgd',metrics=['accuracy'])model.summary() ResNet-34123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#coding=utf-8from keras.models import Modelfrom keras.layers import Input,Dense,Dropout,BatchNormalization,Conv2D,MaxPooling2D,AveragePooling2D,concatenate,Activation,ZeroPadding2Dfrom keras.layers import add,Flatten#from keras.layers.convolutional import Conv2D,MaxPooling2D,AveragePooling2Dimport numpy as npseed = 7np.random.seed(seed) def Conv2d_BN(x, nb_filter,kernel_size, strides=(1,1), padding='same',name=None): if name is not None: bn_name = name + '_bn' conv_name = name + '_conv' else: bn_name = None conv_name = None x = Conv2D(nb_filter,kernel_size,padding=padding,strides=strides,activation='relu',name=conv_name)(x) x = BatchNormalization(axis=3,name=bn_name)(x) return x def Conv_Block(inpt,nb_filter,kernel_size,strides=(1,1), with_conv_shortcut=False): x = Conv2d_BN(inpt,nb_filter=nb_filter,kernel_size=kernel_size,strides=strides,padding='same') x = Conv2d_BN(x, nb_filter=nb_filter, kernel_size=kernel_size,padding='same') if with_conv_shortcut: shortcut = Conv2d_BN(inpt,nb_filter=nb_filter,strides=strides,kernel_size=kernel_size) x = add([x,shortcut]) return x else: x = add([x,inpt]) return x inpt = Input(shape=(224,224,3))x = ZeroPadding2D((3,3))(inpt)x = Conv2d_BN(x,nb_filter=64,kernel_size=(7,7),strides=(2,2),padding='valid')x = MaxPooling2D(pool_size=(3,3),strides=(2,2),padding='same')(x)#(56,56,64)x = Conv_Block(x,nb_filter=64,kernel_size=(3,3))x = Conv_Block(x,nb_filter=64,kernel_size=(3,3))x = Conv_Block(x,nb_filter=64,kernel_size=(3,3))#(28,28,128)x = Conv_Block(x,nb_filter=128,kernel_size=(3,3),strides=(2,2),with_conv_shortcut=True)x = Conv_Block(x,nb_filter=128,kernel_size=(3,3))x = Conv_Block(x,nb_filter=128,kernel_size=(3,3))x = Conv_Block(x,nb_filter=128,kernel_size=(3,3))#(14,14,256)x = Conv_Block(x,nb_filter=256,kernel_size=(3,3),strides=(2,2),with_conv_shortcut=True)x = Conv_Block(x,nb_filter=256,kernel_size=(3,3))x = Conv_Block(x,nb_filter=256,kernel_size=(3,3))x = Conv_Block(x,nb_filter=256,kernel_size=(3,3))x = Conv_Block(x,nb_filter=256,kernel_size=(3,3))x = Conv_Block(x,nb_filter=256,kernel_size=(3,3))#(7,7,512)x = Conv_Block(x,nb_filter=512,kernel_size=(3,3),strides=(2,2),with_conv_shortcut=True)x = Conv_Block(x,nb_filter=512,kernel_size=(3,3))x = Conv_Block(x,nb_filter=512,kernel_size=(3,3))x = AveragePooling2D(pool_size=(7,7))(x)x = Flatten()(x)x = Dense(1000,activation='softmax')(x) model = Model(inputs=inpt,outputs=x)model.compile(loss='categorical_crossentropy',optimizer='sgd',metrics=['accuracy'])model.summary() ResNet-50123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#coding=utf-8from keras.models import Modelfrom keras.layers import Input,Dense,BatchNormalization,Conv2D,MaxPooling2D,AveragePooling2D,ZeroPadding2Dfrom keras.layers import add,Flatten#from keras.layers.convolutional import Conv2D,MaxPooling2D,AveragePooling2Dfrom keras.optimizers import SGDimport numpy as npseed = 7np.random.seed(seed) def Conv2d_BN(x, nb_filter,kernel_size, strides=(1,1), padding='same',name=None): if name is not None: bn_name = name + '_bn' conv_name = name + '_conv' else: bn_name = None conv_name = None x = Conv2D(nb_filter,kernel_size,padding=padding,strides=strides,activation='relu',name=conv_name)(x) x = BatchNormalization(axis=3,name=bn_name)(x) return x def Conv_Block(inpt,nb_filter,kernel_size,strides=(1,1), with_conv_shortcut=False): x = Conv2d_BN(inpt,nb_filter=nb_filter[0],kernel_size=(1,1),strides=strides,padding='same') x = Conv2d_BN(x, nb_filter=nb_filter[1], kernel_size=(3,3), padding='same') x = Conv2d_BN(x, nb_filter=nb_filter[2], kernel_size=(1,1), padding='same') if with_conv_shortcut: shortcut = Conv2d_BN(inpt,nb_filter=nb_filter[2],strides=strides,kernel_size=kernel_size) x = add([x,shortcut]) return x else: x = add([x,inpt]) return x inpt = Input(shape=(224,224,3))x = ZeroPadding2D((3,3))(inpt)x = Conv2d_BN(x,nb_filter=64,kernel_size=(7,7),strides=(2,2),padding='valid')x = MaxPooling2D(pool_size=(3,3),strides=(2,2),padding='same')(x) x = Conv_Block(x,nb_filter=[64,64,256],kernel_size=(3,3),strides=(1,1),with_conv_shortcut=True)x = Conv_Block(x,nb_filter=[64,64,256],kernel_size=(3,3))x = Conv_Block(x,nb_filter=[64,64,256],kernel_size=(3,3)) x = Conv_Block(x,nb_filter=[128,128,512],kernel_size=(3,3),strides=(2,2),with_conv_shortcut=True)x = Conv_Block(x,nb_filter=[128,128,512],kernel_size=(3,3))x = Conv_Block(x,nb_filter=[128,128,512],kernel_size=(3,3))x = Conv_Block(x,nb_filter=[128,128,512],kernel_size=(3,3)) x = Conv_Block(x,nb_filter=[256,256,1024],kernel_size=(3,3),strides=(2,2),with_conv_shortcut=True)x = Conv_Block(x,nb_filter=[256,256,1024],kernel_size=(3,3))x = Conv_Block(x,nb_filter=[256,256,1024],kernel_size=(3,3))x = Conv_Block(x,nb_filter=[256,256,1024],kernel_size=(3,3))x = Conv_Block(x,nb_filter=[256,256,1024],kernel_size=(3,3))x = Conv_Block(x,nb_filter=[256,256,1024],kernel_size=(3,3)) x = Conv_Block(x,nb_filter=[512,512,2048],kernel_size=(3,3),strides=(2,2),with_conv_shortcut=True)x = Conv_Block(x,nb_filter=[512,512,2048],kernel_size=(3,3))x = Conv_Block(x,nb_filter=[512,512,2048],kernel_size=(3,3))x = AveragePooling2D(pool_size=(7,7))(x)x = Flatten()(x)x = Dense(1000,activation='softmax')(x) model = Model(inputs=inpt,outputs=x)sgd = SGD(decay=0.0001,momentum=0.9)model.compile(loss='categorical_crossentropy',optimizer=sgd,metrics=['accuracy'])model.summary() 参考： 1. 对比深度学习十大框架：TensorFlow 并非最好？ &#8617; 2. keras实现常用深度学习模型LeNet，AlexNet，ZFNet，VGGNet，GoogleNet，Resnet &#8617; 类似程序可参考： AlexNet的理解及其Keras实现 VGGNet的理解及其Keras实现 GoogLeNet的理解及其Keras实现 ResNet的理解及其Keras实现]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Keras</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[经典CNN网络结构汇总]]></title>
    <url>%2Farticle%2FCNNArchitecture.html</url>
    <content type="text"><![CDATA[鉴于平时接触的知识、概念等太多，一些知识点时间长了也容易忘记，因此这里对之前所了解的各种卷积神经网络做一个归纳。 大名鼎鼎的LeNet5 诞生于1994年，是最早的深层卷积神经网络之一，并且推动了深度学习的发展。从1988年开始，在多次成功的迭代后，这项由Yann LeCun完成的开拓性成果被命名为LeNet5。LeCun认为，可训练参数的卷积层是一种用少量参数在图像的多个位置上提取相似特征的有效方式，这和直接把每个像素作为多层神经网络的输入不同。像素不应该被使用在输入层，因为图像具有很强的空间相关性，而使用图像中独立的像素直接作为输入则利用不到这些相关性。 LeNet - 1998 AlexNet - 2012 ZF-Net - 2013 GoogLeNet - 2014 VGG - 2014 ResNet - 2015 残差结构：]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Deep Learning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[A Comprehensive Survey on Deep Learning Approaches]]></title>
    <url>%2Farticle%2FSurveyOnDL.html</url>
    <content type="text"><![CDATA[前段时间，一位天大的师兄分享了这篇文章，干货满满！ 感觉十分不错，自己也挂出来分享下。 The History Began from AlexNet: A Comprehensive Survey on Deep Learning Approaches M. Z. Alom, T. M. Taha, C. Yakopcic, S. Westberg, M. Hasan, B. C. Van Esesn, A. A. S. Awwal, and V. K. Asari, “The history began from alexnet: A comprehensive survey on deep learning approaches,” arXiv preprint arXiv:1803.01164, 2018. 论文地址：https://arxiv.org/abs/1803.01164 A. 深度学习方法的类型 监督学习 半监督学习 非监督学习 深度强化学习（DRL） B. 特征学习C. 应用深度学习的时机和领域D. 深度学习的前沿发展 ImageNet 数据集上的图像分类 自动语音识别 E. 为什么要使用深度学习 通用学习方法 鲁棒性 泛化 可扩展性 F. 深度学习面临的挑战后面的结构如下： 第二节讨论 DNN 的详细调查；第三节讨论 CNN；第四节介绍了不同的先进技术，以有效地训练深度学习模型； 第五节讨论 RNN； AE 和 RBM 在第六节中讨论； GAN 及其应用在第七节讨论；强化学习在第八节中介绍；第九节解释迁移学习； 第十节介绍了深度学习的高效应用方法和硬件； 第十一节讨论了深度学习框架和标准开发工具包（SDK）； 第十二节给出了不同应用领域的基准测试结果；第十三节为结论。]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Deep Learning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[机器学习常用算法总结]]></title>
    <url>%2Farticle%2FMachineLearningNote.html</url>
    <content type="text"><![CDATA[因为最近一段时间准备找工作的事情，所以对之前机器学习的内容做了一个梳理。 结合麦子学院里面大牛的教程，这里对机器学习中常用的算法进行归纳和总结。 机器学习总的可以分为以下四类： 监督学习（Supervised Learning） 非监督学习（Unsupervised Learning） 半监督学习（Semi-Supervised Learning） 强化学习（Reinforcement Learning） 监督学习（Supervised Learning）1.监督学习：分类（Classification） 决策树（Decision Tree） 【代码】 KNN（K Nearest Neighbor） 【代码】 支持向量机（Support Vector Machine） 线性可区分 【代码】 线性不可分 【代码】 神经网络（Neural Network） 【代码一】 【代码二】 注：神经网络既可以用来做分类（classification）问题，也可以用来解决回归（regression）问题。 2.监督学习：回归（Regression） 线性回归 简单线性回归 【代码】 多元线性回归 【代码】 非线性回归 【代码】 回归中的相关度和R平方值 【代码】 非监督学习（Unsupervised Learning）1.非监督学习：聚类（Clustering） 用K-mean算法聚类（Clustering） 【代码】 用Hierarchical clustering算法聚类 【代码】 2.非监督学习：降维（Dimensionality Reduction） PCA 流形学习 SK-Learn Exampleshttp://scikit-learn.org/stable/ SK-learn: Choosing the right estimator]]></content>
      <categories>
        <category>Machine Learning</category>
      </categories>
      <tags>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[成都参会之记]]></title>
    <url>%2Farticle%2FICAIBDJourney.html</url>
    <content type="text"><![CDATA[于5月26-28日去成都参加了「2018 International Conference on Artificial Intelligence and Big Data」，私认为收获颇多，特记录所想所感，方将来勉励自己，回过头来看看，结果强行写成了日记，手动捂脸。 5月26日 厦门，轻微雾霾 于26日早和「吴二狗」从学校一同出发，去机场的路上和滴滴司机吹逼厦门的房价，厦门的房价仿佛如伦敦的天气般，成了陌生人间寒暄的必聊话题。忙碌中，赶上了早班飞机。 成都，小雨初过 飞机下降的过程中，小雨滋润后的成都清晰的浮现在眼前，整座城市仿佛被洗涤了一般，秀色可餐。随人潮涌入了地铁中，既陌生也熟悉的方言，才把自己拉过来魂，意识到来了成都。和「吴二狗」在某地铁中转站挥手分道扬镳。 因早起，中午特在酒店补了个觉，虽然没睡着。2点左右便行至会场注册，领取了材料，被告知了会议相关细节。后，正好在地图上看到了不远处即有一所高庙「文殊院」，特步行于此，踱步直至傍晚，古色古香，庄严肃穆，真是个好去处。 做地铁参观了下人民公园，被成都城区绿意所感染，整个人都一直是处于很舒服的状态。饭点特品尝了下著名的担担面，不禁美味，食之两碗。 后又去附近的「宽窄巷子」逛了逛，独自一人，自己也整个洒脱了起来，穿街过巷，访店过坊，巴不得每个角落都看个遍，然而和西塘、鼓浪屿等并无两样，影响最深刻的就是有个印章篆刻的师傅，要价很贵。 晚10时左右，返回住处。 5月27日 成都，晴 9时抵达会场，大牛们的陆续汇报，自己震撼于科技的进步，传感器网络在大数据及人工智能中的应用让我很是感兴趣。私以为，未来是万物互联的世界，各类「智能」传感器必然担当起重要角色。 汇报前的等待总是充满了激动和紧张，当然，自我情绪的调节还是稍微有效的。下午4时后自己的汇报时间点，猛着一股劲便作了报告，概述了拙见，交换了意见，整个人也放松了起来。对智能的未来，充满期待。另外，深感稿子还是要牢牢熟背！ 自己的会议日程结束后，便早早的溜走了。大成都的美，还是要好好的花时间去品味。后便去「天府广场」溜达了下，整个广场被科技馆、图书馆、博物馆等包围，可以看出成都人民对文化、教育及科技的重视程度之深。 坐了约莫一个小时，为N个游人拍了照，便打算参观下成都的时尚之美，步行至春熙路。为方便深刻体验成都的时尚，也只好独身深入步行街去感受，成都妹子可以称之为秀色宜人。特去IFS拜访了下「熊猫爬墙」，感叹艺术的伟大！ 晚9时于太古里返回住处，特买了点瓜子，供晚上看电影消遣用。 5月28日 成都，晴 一觉睡到自然醒，本打算去省博物馆参观下，无奈于当天周一，博物馆闭馆而不得打消了此计划。后便在周边看了看，寄存了行李。午餐尝了下有名的「夫妻肺片」，四川的辣还是不同于两湘地区，实属麻辣。整个来说，物价还是比厦门低。 午餐后和「吴二狗」于熊猫大道地铁站汇合，意打算参观下成都大熊猫繁育研究基地。当时见「二狗」满面红光，甚不知发生了什么，涉及隐私，便不方便打问。 二人乘车至「熊猫基地」，半价票29元甚是优惠。园内途径「天鹅湖」，黑天鹅是相当的蠢萌，人走哪，其游哪，不知是因为游客经常投食，还是受熊猫影响，呆至如此。 听「吴二狗」说看熊猫全凭运气，我开始不信。后步至各熊猫园，譬如「成年大熊猫别墅」、「大熊幼稚园」等，告知因天气炎热，熊猫被收回房内，深感「吴二狗」所言极是。 虽有可惜，但也面睹了国宝之真容，仍感欣慰。在园区一直溜达到傍晚，最终依依不舍的离开。 后两人商议去体验下成都火锅，成都火锅品牌很多，在「吴二狗」强烈提议下去了「小龙坎火锅店」，口味确实正宗，两人吃了个大饱，也正儿八经的体验了下成都人的日常生活。 吃完火锅，步行至IFS，上顶层端详了下「熊猫爬墙」的正脸，对其忧郁的表情很是不解。因时间太晚，另第二天赶早班飞机，随返回住处。 5月29日 成都，晴 一早，酒店派车送至航站楼，感火锅后劲仍在，肠胃初次接触成都本地火锅，还是需要适应的过程。「吴二狗」声称川航的妹子国内顶尖，果不其然，另飞机餐也很多样。 厦门，爆晒 到厦门时，已是中午，爆晒，相比之下，成都更为宜居。 此次行程终结。 附图]]></content>
      <categories>
        <category>Notes</category>
      </categories>
      <tags>
        <tag>成都</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TensorFlow Object detection API教程之二：训练自己的模型]]></title>
    <url>%2Farticle%2FTensorFlowObjectDetectionAPITutorial2.html</url>
    <content type="text"><![CDATA[TensorFlow Object detection API 教程系列： TensorFlow Object detection API 教程之一：Object detection API安装 TensorFlow Object detection API 教程之二：训练自己的模型 TensorFlow Object detection API 教程之三：测试自己的模型 这一节，我们将对TensorFlow中的训练过程做一个介绍，训练模型的步骤可大体划分为以下几步： 收集数据去收集至少100张包含你需要检测目标的图像，理想的情况是数据越多越好，不过对下一步的打标签带来沉重的任务。 将数据安装9：1的比例划分为训练集和测试集，并根据要训练的数据集，创建.pbtxt文件。 打标签使用LabelImg对数据集打标签，可以生成Pascal VOC格式的xml文件。 关于LabelImg的相关教程请参考下方两个链接： 1.LabelImg介绍与安装教程 2.LabelImg使用教程 将数据转换为TF Records格式 借助Raccon_dataset中的xml_to_csv.py将数据由XML格式转为CSV格式。 12345678910111213# 其中def main(): image_path = os.path.join(os.getcwd(), 'annotations') xml_df = xml_to_csv(image_path) xml_df.to_csv('raccoon_labels.csv', index=None) print('Successfully converted xml to csv.')# 修改为：def main(): for directory in ['train','test']: image_path = os.path.join(os.getcwd(), 'images/&#123;&#125;'.format(directory)) xml_df = xml_to_csv(image_path) xml_df.to_csv('data/&#123;&#125;_labels.csv'.format(directory), index=None) print('Successfully converted xml to csv.') 此时目录譬如下方结构： 12345678910111213.└── Object-Detection/ ├── data/ │ └── test_labels.csv | └── train_labels.csv └── images/ | └── test/ | | └── testingimages.jpg | └── train/ | └── trainingimages.jpg | └── yourimages.jpg └── training/ └── xml_to_csv.py 借助Raccon_dataset中的generate_tfrecord.py将数据由CSV格式转为TF Records格式。 注意：generate_tfrecord.py的Todo部分需要与你的.pbtxt文件内的内容一致 1234567# TO-DO replace this with label mapdef class_text_to_int(row_label): if row_label == 'macncheese': return 1 else: None# 此处只有一类 执行： 123# 譬如python generate_tfrecord.py --csv_input=data/train_labels.csv --output_path=data/train.recordpython3 generate_tfrecord.py --csv_input=data/test_labels.csv --output_path=data/test.record 另外在models/research/object_detection/dataset_tools目录中，官方提供了一些数据转换工具。 配置模型参数Tensorflow Object Detection API中模型参数、训练参数、评估参数都是在一个config文件中配置。 在配置模型参数的时候，通常有两种方式，一是使用预训练的模型，通过迁移学习(Transfer learning )来学习一个新目标(Object)，这种训练方式可以大幅缩减训练的时间，使用少量的数据就可以达到较好的效果。另外一种是从头开始训练，end-to-end。 在models/research/object_detection/samples/configs/的路径下，官方提供了一些object_detection配置文件的结构。在.config中搜索所有的PATH_TO_BE_CONFIGURED，修改为自己数据所存放的路径。另外还有heckpoint的路径、名称，num_classes的数目，label_map_path的路径等，按需修改。 训练在tensorflow/models/research/路径下，执行： 1234567# From tensorflow/models/research/python object_detection/model_main.py --pipeline_config_path=$&#123;YOUR_DIRECTORY&#125;\object_detection\samples\configs\XXXXXXX.config --model_dir=$&#123;YOUR_DIRECTORY&#125;\object_detection\data --num_train_steps=50000 --num_eval_steps=2000 --alsologtostderr 其中：--pipeline_config_path,--model_dir,--num_train_steps等按需修改。 使用Tensorboard对过程进行监视 1tensorboard --logdir=$&#123;YOUR_DIRECTORY&#125;/model_dir 在浏览器中输入127.0.0.1:6006观察训练的过程。 参考文献： [1]https://pythonprogramming.net/custom-objects-tracking-tensorflow-object-detection-api-tutorial/[2]https://pythonprogramming.net/creating-tfrecord-files-tensorflow-object-detection-api-tutorial/[3]https://pythonprogramming.net/training-custom-objects-tensorflow-object-detection-api-tutorial/]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Tensorflow</tag>
        <tag>Object detection</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TensorFlow Object detection API教程之一：TensorFlow及其Object detection API安装]]></title>
    <url>%2Farticle%2FTensorFlowObjectDetectionAPITutorial1.html</url>
    <content type="text"><![CDATA[之前一直在Caffe平台做object detection，后面查阅相关资料时，经常看到TensorFlow下的object detection API，怀着好奇心了解了下，发现效果很不错，总体而言比Caffe下要简单些。 Google niubility ! TensorFlow Object detection API 教程系列： TensorFlow Object detection API 教程之一：Object detection API安装 TensorFlow Object detection API 教程之二：训练自己的模型 TensorFlow Object detection API 教程之三：测试自己的模型 安装TensorFlow12345678910111213141516# 安装TensorFlowpip install tensorflow # For CPUpip install tensorflow-gpu # For GPU# 若安装不同版本的TensorFlow# pip install tensorflow==1.4.0# pip install tensorflow-gpu==1.4.0# 卸载TensorFlow# pip uninstall tensorflow# 验证TensorFlow是否安装成功# 输出Hello, TensorFlow! 则代表安装成功。&gt;&gt;&gt; import tensorflow as tf&gt;&gt;&gt; hello = tf.constant('Hello, TensorFlow!')&gt;&gt;&gt; sess = tf.Session()&gt;&gt;&gt; print(sess.run(hello)) 安装TensorFlow Object Detection API1234567891011121314151617181920212223242526272829303132333435363738# 安装依赖项sudo apt-get install protobuf-compiler python-pil python-lxmlsudo pip install jupytersudo pip install matplotlib# 下载TensorFlow Object Detection APImkdir ~/tensorflowcd ~/tensorflowgit clone https://github.com/tensorflow/models.git# 编译protobuf# 进入object_detection所在目录# 譬如：cd ~/tensorflow/models/research/# 编译成功时,界面无任何显示protoc object_detection/protos/*.proto --python_out=.# 添加环境变量# 1.进入object_detection所在目录# 譬如：cd ~/tensorflow/models/research/export PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim# 这条命令在新打开的终端中需要重新执行一次才会在新终端中生效# 2.添加到~/.bashrcgedit ~/.bashrc# 将下面命令添加到最后，注意'pwd'更换为object_detection的路径# export PYTHONPATH=$PYTHONPATH:`pwd`:`pwd`/slim# 进入object_detection所在目录，在终端输入pwd查询# 例如我的export PYTHONPATH=$PYTHONPATH:/root/tensorflow/models/research:/root/tensorflow/models/research/slim# Testpython object_detection/builders/model_builder_test.py# 成功则显示如下：.......----------------------------------------------------------------------Ran 7 tests in 0.026sOK Debugs123456# Bugillegal instruction (sore dumped)# Debugpip uninstall tensorflowpip install tensorflow==1.5 1234567891011121314# Bugobject_detection/protos/ssd.proto:11:3: Expected "required", "optional", or "repeated".# Debug# 使用高版本protoc#download protoc 3.3mkdir protoc_3.3cd protoc_3.3wget https://github.com/google/protobuf/releases/download/v3.3.0/protoc-3.3.0-linux-x86_64.zipchmod 775 protoc-3.3.0-linux-x86_64.zipunzip protoc-3.3.0-linux-x86_64.zip#compile proto filecd /usr/local/lib/python2.7/dist-packages/tensorflow/models/~/protoc_3.3/bin/protoc object_detection/protos/*.proto --python_out=.]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Tensorflow</tag>
        <tag>Object detection</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于机器学习和深度学习的一些思考]]></title>
    <url>%2Farticle%2FNotes01.html</url>
    <content type="text"><![CDATA[现在各种学习算法火的一塌糊涂，很多人进入这个圈子搞研究，但有多少人真正明白为什么要用这些学习算法，以及如何将算法落地应用到工程中？ 当前机器学习及深度学习训练模型都需要大量的数据或特征，公司或研究机构都需要花费大量人力物力去获取数据、标注数据，还需要高性能的计算机或服务器通过数据来训练模型，总所走着的是花费时间长，所需成本高，模型获取复杂。 由上述情况，个人认为将来机器学习及深度学习或可能向这么几个方向发展。一，采用大数据或GAN得到大量数据，采用某种方法（待查阅相关资料）对数据自行标注；二，学习算法或向数据需求少，计算复杂度低，可移植性高，向移动端或嵌入式设备靠拢。（由于个人层次比较低，眼界相对较窄，望阅读的同学不要因此随笔所局限住思维，还请不吝赐教） 从整个工程系统来看，机器学习、深度学习等只是一种工具，甚至可以说是一种可替代的工具，这个工具既可以被（改良的）传统算法所取代（毕竟发展时间长，应用成熟），也可以被未来更为优秀、高效的算法所取代。 个人认为做项目，更应该从宏观的角度来思考整个系统，而不应被某一算法或某一框架所局限。而且，要乐于去拥抱新技术，去探索新方向，去尝试别人未曾做过的事物。 至于学习算法将来会不会其他更优秀、更高效、更实际的算法取代，还有待观望。不过人工智能仍然将是未来社会的发展动力，仍是各国政府及企业所关注的重要方向，因此也勉励自己能够在这个道路上继续走下去，转化为自己的核心竞争力。]]></content>
      <categories>
        <category>Notes</category>
      </categories>
      <tags>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Chrome常用快捷键]]></title>
    <url>%2Farticle%2FChromeHotKey.html</url>
    <content type="text"><![CDATA[上一篇越扯越远，本想做一个快捷键归纳的日志，方便以后忘记的时候查阅。 没想到，硬生生写成了一篇吐槽文，新开一篇特贴上干货。 Mac 快捷键 功能 ⌘ + N 打开新窗口 ⌘+ T 打开新标签页 ⌘+ Shift + N 无痕模式下打开新窗口 ⌘+ 鼠标左击 链接新窗口打开 ⌘+ R 页面刷新 ⌘ + W 关闭网页 ⌘+ Shift + T 重新打开最后关闭的标签页 ⌘ + D 将网页保存为书签 ⌘ + Shift + B 显示或隐藏书签栏 ⌘ + Option + B 打开书签管理器 Win &amp; Linux 快捷键 功能 Ctrl + N 打开新窗口 Ctrl + T 打开新标签页 Ctrl + Shift + N 无痕模式下打开新窗口 Ctrl + 鼠标左击 链接新窗口打开 Ctrl + R 页面刷新 Ctrl + W 关闭网页 Ctrl + Shift + T 重新打开最后关闭的标签页 Ctrl + D 将网页保存为书签 Ctrl + Shift + B 显示或隐藏书签栏 Ctrl + Shift + O 打开书签管理器 更多快捷键参看官方介绍：Chrome 键盘快捷键]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Chrome</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[那些年我用过的搜索引擎]]></title>
    <url>%2Farticle%2FSearchEngines.html</url>
    <content type="text"><![CDATA[早先在Mac上一直用Safari和Chrome，后来转Win开始用UC和Firefox。 作为一个追求艺术和高效的汉子，使用浏览器则一直在路上。 最近使用UC，发现其貌似在Win10下启用了Edge内核，而之前其一直是使用Chrome内核，这种更换严重影响了我的网页体验，致使GitHub无故打不开。 迫不得己，又转回了Chrome，特此对Chrome的部分快捷键做个归纳。 PS: UC遇到的问题，熟悉的味道，熟悉的IE界面。 后来去UC官方论坛看了看，果真… 写着写着就跑远了，赶紧回头把快捷键贴上。 快捷键—跳转链接]]></content>
      <categories>
        <category>Notes</category>
      </categories>
      <tags>
        <tag>Search Engines</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ROS相关画图工具]]></title>
    <url>%2Farticle%2FROSPlotTools.html</url>
    <content type="text"><![CDATA[通过查阅很多资料，这里对ROS中的画图工具（或者称为：日志分析工具）作一个总结。 rxplot官方介绍：http://wiki.ros.org/rxplot Since Groovy, rxplot becomes DEPRECATED and is succeeded by rqt_plot. 说明的是rxplot被rqt_plot替代了。 rqt_plot官方介绍：http://wiki.ros.org/rqt_plot rqt_plot provides a GUI plugin visualizing numeric values in a 2D plot using different plotting backends. rqt_plot提供了一个GUI插件，使用不同的绘图后端在2D图中显示数值。 PlotJuggler介绍：https://github.com/facontidavide/PlotJuggler PlotJuggler is meant to be a better alternative to rqtplot and rqtbag, providing a more user friendly interface. PlotJuggler旨在成为rqtplot和rqtbag的更好替代品，提供更友好的用户界面。 Matlab另外一个方法就是，借助Matlab中进行画图，这种方式更适合搞研究，做仿真。 官方相关：Work with rosbag Logfiles, Control LBR Manipulator Motion Through Joint Torque Commands MATLAB® can read these rosbag files and help with filtering and extracting message data. 关于更多 ROS + Matlab 相关教程，参看：Robotics System Toolbox Examples]]></content>
      <categories>
        <category>ROS</category>
      </categories>
      <tags>
        <tag>ROS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于ROS运行Caffe-SSD demo【通用】]]></title>
    <url>%2Farticle%2FCaffeSSDDemo.html</url>
    <content type="text"><![CDATA[最近仔细研究了下SSD相关的几个demo文件，在这里做一个简要的记录。 大神weiliu89提供的Caffe/examples/ssd下提供了很多demo程序，常用的有以下这么几个。 关于配置Caffe-SSD请参看官方文档或我之前的笔记，不过我之前的教程是基于ROS的。 使用ssd_detect.cpp生成可执行程序：注：C++程序不自动显示label 对ssd_detect.cpp进行编译，生成可执行二进制文件，使用ssd_detect.bin接口程序（路径：caffe/build/examples/ssd/），检测image或video； 1234567build/examples/ssd/ssd_detect.bin models/VGGNet/VOC0712/SSD_300x300/deploy.prototxt \models/VGGNet/VOC0712/SSD_300x300/VGG_VOC0712_SSD_300x300_iter_120000.caffemodel \examples/videos/test.txt --file_type video \--out_file output.txt \--confidence_threshold 0.4 #检测视频，阈值为0.4并保存结果# 一定要注意上述路径，最易出错# 注：若出现错误，请将换行符删除 使用examples/ssd/plot_detections.py，对ssd_detect.cpp的输出文件，绘制检测结果。 123456python examples/ssd/plot_detections.py examples/images/result.txt \/home/catkin_ws/src/roc_caffe/caffe \--labelmap-file data/VOC0712/labelmap_voc.prototxt \--save-dir examples/# 一定要注意上述路径，最易出错# 注：若出现错误，请将换行符删除 作为类来调用将ssd_detect.cpp改写为一个头文件（譬如：Detector.h），然后进行调用。 使用ssd_detect.py12345678# 先进入caffe主路径，譬如我的路径cd ~/catkin_ws/src/ros_caffe/caffe/# 检测单张图片python examples/ssd/score_ssd_pascal.py# 检测视频python examples/ssd/ssd_pascal_video.py # 通过摄像头，检测实时视频python examples/ssd/ssd_pascal_webcam.py Debugs1234567# BugImportError:No module named caffe# Debug# 在py代码中添加import sys,oscaffe_root = '/home/cong/catkin_ws/src/ros_caffe/caffe'sys.path.insert(0, caffe_root + 'python')]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Caffe</tag>
        <tag>SSD</tag>
        <tag>Demo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[无人机相关坐标系的解算]]></title>
    <url>%2Farticle%2FUAVCoordinateSystemSolving.html</url>
    <content type="text"><![CDATA[Enter password to read. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>UAV</category>
      </categories>
      <tags>
        <tag>UAV</tag>
        <tag>坐标系结算</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[目标跟踪算法汇总]]></title>
    <url>%2Farticle%2FTargetTrackingAlgorithm.html</url>
    <content type="text"><![CDATA[目标视觉跟踪(Visual Object Tracking)，大家比较公认分为两大类：生成(generative)模型方法和判别(discriminative)模型方法，目前比较流行的是判别类方法，也叫检测跟踪tracking-by-detection，以下简单介绍。 生成类方法在当前帧对目标区域建模，下一帧寻找与模型最相似的区域就是预测位置，比较著名的有卡尔曼滤波，粒子滤波，mean-shift等。举个例子，从当前帧知道了目标区域80%是红色，20%是绿色，然后在下一帧，搜索算法就像无头苍蝇，到处去找最符合这个颜色比例的区域。 Camshift 算法全称为 Continuiusly Adaptive Mean-SHIFT，主要通过视频图像中运动目标的颜色特征达到跟踪目的。首先，利用鼠标响应函数手动选择出目标物体，然后提取目标物体的颜色直方图特征，再通过反向投影将目标颜色直方图转换为颜色概率分布图，初始化一个搜索窗大小和位置，并根据上一帧得到的结果自适应调整搜索窗口，进而求解目标在视频图像中的位置。 粒子滤波算法主要利用目标物体的颜色直方图特征，通过粒子预估、校正、重采样等步骤，最终提高目标跟踪算法的抗干扰能力，并保证目标跟踪的实时性。 粒子滤波又称为条件概率密度传播算法和序列蒙特卡罗方法，从本质上讲，粒子滤波是一种基于蒙特卡罗仿真的最优回归贝叶斯滤波算法，它将状态向量表示为一组带有相应权值的随机样本，并通过这些样本和权值计算出状态的估值。 光流指运动的物体经过相机成像后获得的像素在运动时的瞬时速度，光流的计算是通过图像序列中的像素灰度在相邻帧间的变化和相关性，来确定各像素位置的运动情况，即研究图像灰度在时间上的变化与空间上的运动关系。 判别类方法CV中的经典套路图像特征+机器学习， 当前帧以目标区域为正样本，背景区域为负样本，机器学习方法训练分类器，下一帧用训练好的分类器找最优区域。举个例子，在训练时告诉tracker目标80%是红色，20%是绿色，还告诉它背景中有橘红色，要格外注意别搞错了，这样的分类器知道更多信息，效果也相对更好。 经典判别类方法推荐Struck和TLD，都能实时性能还行，Struck是2012年之前最好的方法，TLD是经典long-term的代表，思想非常值得借鉴。 tracking-by-detection和检测算法非常相似，如经典行人检测用HOG+SVM，Struck用到了haar+structured output SVM，跟踪中为了尺度自适应也需要多尺度遍历搜索，区别仅在于跟踪算法对特征和在线机器学习的速度要求更高，检测范围和尺度更小而已。 相关滤波类方法correlation filter简称CF，最经典的高速相关滤波类跟踪算法CSK, KCF/DCF, CN。]]></content>
      <categories>
        <category>Computer Vision</category>
      </categories>
      <tags>
        <tag>Computer Vision</tag>
        <tag>Object</tag>
        <tag>Tracking</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo中LaTeX公式渲染]]></title>
    <url>%2Farticle%2FHexoWihLaTeX.html</url>
    <content type="text"><![CDATA[在 Hexo 中，无法显示LaTeX数学公式，这对于书写学术博客来说是很大的不便。 以下便是通过安装第三方库来解决这一问题。 安装Kramed代码Hexo 默认的渲染引擎是 Marked，但是 Marked 不支持 Mathjax。 Kramed 是在 Marked 的基础上进行修改。我们在工程目录下执行以下命令来安装 Kramed. 12npm uninstall hexo-renderer-marked --savenpm install hexo-renderer-kramed --save 然后，更改renderer.js（路径：/node_modules/hexo-renderer-kramed/lib/renderer.js）， 更改： 12345// Change inline math rulefunction formatText(text) &#123; // Fit kramed's rule: $$ + \1 + $$ return text.replace(/`\$(.*?)\$`/g, '$$$$$1$$$$');&#125; 为： 1234// Change inline math rulefunction formatText(text) &#123; return text;&#125; 停止使用 hexo-math首先，如果你已经安装 hexo-math, 请卸载它： 1npm uninstall hexo-math --save 然后安装 hexo-renderer-mathjax 包： 1npm install hexo-renderer-mathjax --save 更新 Mathjax 的 CDN 链接首先，打开mathjax.html（路径：/node_modules/hexo-renderer-mathjax/mathjax.html） 然后，把&lt;script&gt;更改为： 1&lt;script src="//cdn.bootcss.com/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML"&gt;&lt;/script&gt; 在Marked中更改默认转义规则因为 Hexo 默认的转义规则会将一些字符进行转义，比如 _ 转为 &lt;em&gt;, 所以我们需要对默认的规则进行修改.首先， 打开inline.js（路径：node_modules\kramed\lib\rules\inline.js） 12# 第11行escape: /^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/, 更改为: 1escape: /^\\([`*\[\]()# +\-.!_&gt;])/, 把 12# 第20行em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/, 更改为: 1em: /^\*((?:\*\*|[\s\S])+?)\*(?!\*)/, 开启mathjax在主题 _config.yml (路径：/theme/next/_config.yml)中开启 Mathjax， 找到 mathjax 字段修改如下代码（false改为true）： 12mathjax: enable: true 在文章的Front-matter里打开Mathjax开关1234567---title: Hexo中LaTeX公式渲染date: 2018-03-25 16:10:25tags: [Markdown, LaTeX, Hexo]categories: Hexomathjax: true--- 测试LaTeX源码： 123456\begin&#123;eqnarray&#125;\nabla\cdot\vec&#123;E&#125; &amp;=&amp; \frac&#123;\rho&#125;&#123;\epsilon_0&#125; \\\nabla\cdot\vec&#123;B&#125; &amp;=&amp; 0 \\\nabla\times\vec&#123;E&#125; &amp;=&amp; -\frac&#123;\partial B&#125;&#123;\partial t&#125; \\\nabla\times\vec&#123;B&#125; &amp;=&amp; \mu_0\left(\vec&#123;J&#125;+\epsilon_0\frac&#123;\partial E&#125;&#123;\partial t&#125; \right)\end&#123;eqnarray&#125; 显示效果，如下所示： \begin{eqnarray} \nabla\cdot\vec{E} &=& \frac{\rho}{\epsilon_0} \\ \nabla\cdot\vec{B} &=& 0 \\ \nabla\times\vec{E} &=& -\frac{\partial B}{\partial t} \\ \nabla\times\vec{B} &=& \mu_0\left(\vec{J}+\epsilon_0\frac{\partial E}{\partial t} \right) \end{eqnarray}可以正常显示麦克斯韦方程组。]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>LaTeX</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LaTeX矩阵表示]]></title>
    <url>%2Farticle%2FLaTeXMatrix.html</url>
    <content type="text"><![CDATA[前一篇文章，对 LaTeX 中常用的数学符号及公式进行了总结，因研究中时常接触到矩阵，譬如空间坐标系的解算，或者无线通信中多天线发射和接收信号的计算，等等。因此本篇文章特别对常用的矩阵进行了总结。 简单Matrix使用$$\begin{matrix}…\end{matrix}$$来生成矩阵，其中... 表示的是LaTeX 的矩阵命令，矩阵命令中每一行以 \\ 结束，矩阵的元素之间用&amp;来分隔开。 例如： 12345678$$ \begin&#123;matrix&#125; 1 &amp; 2 &amp; 3 \\ 4 &amp; 5 &amp; 6 \\ 7 &amp; 8 &amp; 9 \end&#123;matrix&#125; \tag&#123;1&#125;$$ 示例： \begin{matrix} 1 & 2 & 3 \\ 4 & 5 & 6 \\ 7 & 8 & 9 \end{matrix} \tag{1}带括号的Matrix1. […] 实例： 12345678$$ \begin&#123;bmatrix&#125; 1 &amp; 2 &amp; 3 \\ 4 &amp; 5 &amp; 6 \\ 7 &amp; 8 &amp; 9 \end&#123;bmatrix&#125; \tag&#123;2&#125;$$ 示例： \begin{bmatrix} 1 & 2 & 3 \\ 4 & 5 & 6 \\ 7 & 8 & 9 \end{bmatrix} \tag{2}2. {…} 实例： 12345678$$ \begin&#123;Bmatrix&#125; 1 &amp; 2 &amp; 3 \\ 4 &amp; 5 &amp; 6 \\ 7 &amp; 8 &amp; 9 \end&#123;Bmatrix&#125; \tag&#123;3&#125;$$ 示例： \begin{Bmatrix} 1 & 2 & 3 \\ 4 & 5 & 6 \\ 7 & 8 & 9 \end{Bmatrix} \tag{3}带省略符号的Matrix如果矩阵元素太多，可以使用\cdots ⋯⋯ \ddots ⋱⋱ \vdots ⋮⋮ 等省略符号来定义矩阵。 实例： 123456789$$\begin&#123;bmatrix&#125; 1 &amp; 2 &amp; \cdots &amp; 4 \\ 7 &amp; 6 &amp; \cdots &amp; 5 \\ \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\ 8 &amp; 9 &amp; \cdots &amp; 0 \\\end&#123;bmatrix&#125;\tag&#123;4&#125;$$ 示例： \begin{bmatrix} 1 & 2 & \cdots & 4 \\ 7 & 6 & \cdots & 5 \\ \vdots & \vdots & \ddots & \vdots \\ 8 & 9 & \cdots & 0 \\ \end{bmatrix} \tag{4}带参数的Matrix比如写增广矩阵，可能需要最右边一列单独考虑。可以用array命令来处理。 实例： 123456789$$ \left[ \begin&#123;array&#125;&#123;cc|c&#125; 1 &amp; 2 &amp; 3 \\ 4 &amp; 5 &amp; 6 \end&#123;array&#125;\right] \tag&#123;5&#125;$$ 示例： \left[ \begin{array}{cc|c} 1 & 2 & 3 \\ 4 & 5 & 6 \end{array} \right] \tag{5}其中\begin{array}{cc|c}中的c表示居中对齐元素,|用来作为分割列的符号。 行间矩阵可以使用\bigl(\begin{smallmatrix} ... \end{smallmatrix}\bigr)。 实例： 1我们使用矩阵 $\bigl( \begin&#123;smallmatrix&#125; a &amp; b \\ c &amp; d \end&#123;smallmatrix&#125; \bigr)$ 作为因子矩阵，将其... 示例： 我们使用矩阵 $\bigl( \begin{smallmatrix} a &amp; b \\ c &amp; d \end{smallmatrix} \bigr)$ 作为因子矩阵，将其…]]></content>
      <categories>
        <category>LaTeX</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>LaTeX</tag>
        <tag>矩阵</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown中LaTeX数学符号及公式]]></title>
    <url>%2Farticle%2FMarkdownWithMath.html</url>
    <content type="text"><![CDATA[前言整理笔记的时候经常性的输入公式，考虑过在LyX以及LaTeX里面编写之后截图或者复制过来，但总感觉效果不好并且比较费时，特整理符合Markdown中的公式源码，以便后续方便做笔记。 在输入数学公式的时候，需要在数学公式的前后加入$$符号，将需要输入的公式加入到$$中间。 在Typora中，输入$$然后回车，直接将TeX代码输入进去。 上下标 名称 数学表达式 Markdown源码 上标 $a^b$ a^b 下标 $a_b$ a_b 双下标 $a_{b1}$ a_{b1} 分数 第一个{ }写分子，第二个{ }写分母。 名称 数学表达式 Markdown源码 分数 $\frac{3+8a}{5b+6}$ \frac{3+8a}{5b+6} 累加 累加号的上标下标的前后顺序可以互换。 名称 数学表达式 Markdown源码 求和号 $\sum{3x^n}$ \sum{3x^n} 带范围求和 $\sum_{n=1}^N{3x^n}$ \sum_{n=1}^N{3x^n} 累乘 累加号的上标下标的前后顺序可以互换。 名称 数学表达式 Markdown源码 求和号 $\prod{3x^n}$ \prod{3x^n} 带范围求乘 $\prod_{n=1}^N{3x^n}$ \prod_{n=1}^N{3x^n} 开方[ ]中写的是开几次方，{ }中写的是需要开方的数值。 名称 数学表达式 Markdown源码 开方号 $\sqrt[5]{100}$ \sqrt[5]{100} 积分 名称 数学表达式 Markdown源码 积分 $\int^5_1{f(x)}{\rm d}x$ \int^5_1{f(x)}{\rm d}x 二重积分 $\iint^5_1{f(x)}{\rm d}x$ \iint^5_1{f(x)}{\rm d}x 三重积分 $\iiint^5_1{f(x)}{\rm d}x$ \iiint^5_1{f(x)}{\rm d}x 正无穷、负无穷 名称 数学表达式 Markdown源码 正无穷 $+\infty$ +\infty 负无穷 $-\infty$ -\infty 极限 名称 数学表达式 Markdown源码 左箭头 $\lim_{n\rightarrow+\infty} n$ \lim_{n\rightarrow+\infty} n 关系运算符 名称 数学表达式 Markdown源码 大于等于 $\geq$ \geq 小于等于 $\leq$ \leq 包含于 $\subset$ \subset 包含 $\supset$ \supset 属于 $\in$ \in 二元运算符 名称 数学表达式 Markdown源码 加减 $\pm$ \pm 点乘 $\cdot$ \cdot 乘 $\times$ \times 除 $\div$ \div 否定关系运算符 名称 数学表达式 Markdown源码 不等于 $\not=$ \not= 不小于 $\not&lt;$ \not&lt; 不包含 $\not\supset$ \not\supset 对数运算符 名称 数学表达式 Markdown源码 对数 $\log$ \log 对数 $\log_2{18}$ \log_2{18} 对数 $\ln$ \ln 三角运算符 名称 数学表达式 Markdown源码 垂直 $\bot$ \bot 角 $\angle $ \angle 30度角 $30^\circ$ 30^\circ 正弦 $\sin$ \sin 余弦 $\cos$ \cos 正切 $\tan$ \tan 箭头 名称 数学表达式 Markdown源码 左箭头 $\leftarrow$ \leftarrow 右箭头 $\rightarrow$ \rightarrow 长箭头 $\longrightarrow$ \longrightarrow 上箭头 $\uparrow$ \uparrow 下箭头 $\downarrow$ \downarrow 矢量 名称 数学表达式 Markdown源码 矢量 $\vec{a}$ \vec{a} 省略号 名称 数学表达式 Markdown源码 省略号 $\cdots$ \cdots 希腊字母 字母名称 大写 Markdown源码 小写 Markdown源码 alpha $A$ A $\alpha$ \alpha beta $B$ B $\beta$ \beta gamma $\Gamma$ \Gamma $\gamma$ \gamma delta $\Delta$ \Delta $\delta$ \delta epsilon $E$ E $\epsilon$ \epsilon $\varepsilon$ \varepsilon zeta $Z$ Z $\zeta$ \zeta eta $E$ E $\eta $ \eta theta $\Theta$ \Theta $\theta$ \theta iota $I$ I $\iota$ \iota kappa $K$ K $\kappa$ \kappa lambda $\Lambda$ \Lambda $\lambda$ \lambda Mu $M$ M $\mu$ \mu nu $N$ N $\nu$ \nu xi $\Xi$ \Xi $\xi$ \xi omicron $O$ O $\omicron$ \omicron pi $\Pi$ \Pi $\pi$ \pi rho $P$ P $\rho$ \rho sigma $\Sigma $ \Sigma $\sigma$ \sigma tau $T$ T $\tau$ \tau upsilon $\Upsilon$ \Upsilon $\upsilon$ \upsilon phi $\Phi$ \Phi $\phi$ \phi $\varphi$ \varphi chi $X$ X $\chi$ \chi psi $\Psi$ \Psi $\psi$ \psi sigma $\Sigma$ \Sigma $\sigma$ \sigma 空心字母与Fraktur字母A-Z皆可用 名称 符号 Markdown源码 空心字母 $\mathbb{A} $ \mathbb{A} Fraktur字母 $\mathfrak{B}$ \mathfrak{B} 段内公式 名称 示例 Markdown源码 行内公式 段内公式：$x+y=z$ $x+y=z$ 行间公式 x+y=z \x+y=z 分段函数示例： P_{r-j}= \begin{cases} 0 &\mbox{if r-j is odd}\\ r!\,(-1)^{(r-j)/2} &\mbox{if r-j is even} \end{cases}实例： 1234567$$P_&#123;r-j&#125;= \begin&#123;cases&#125; 0 &amp;\mbox&#123;if $r-j$ is odd&#125;\\ r!\,(-1)^&#123;(r-j)/2&#125; &amp;\mbox&#123;if $r-j$ is even&#125; \end&#123;cases&#125;$$ 公式推导过程有时一行放不下所有的推导过程，放到多行并使得每行的等号对齐可以大大增加可读性。下面这个例子原始形式是A，然后经过三步推导最终得到了D。以符号 &amp; 的下一个字符进行对齐，末尾的两个反斜杠 用来分割行。这里是由于Markdown与mathjax的渲染有冲突才需要用三个反斜杠。 示例： \begin {aligned} A&=B \\ &=C \\ &=D \end {aligned}实例： 1234567$$\begin &#123;aligned&#125;A&amp;=B \\&amp;=C \\&amp;=D\end &#123;aligned&#125;$$ 多行公式align环境可以用来对齐公式，使用&amp;符号来标记对齐的位置。 实例： 123456$$\begin&#123;align&#125;h(x) =&amp; \frac&#123;1&#125;&#123;\int_xt(x)\mathrm&#123;d&#125;x&#125; \tag&#123;1&#125;\\f(x) =&amp; \frac&#123;1&#125;&#123;\int_x\eta(x)\mathrm&#123;d&#125;x&#125;g(x)\tag&#123;2&#125;\end&#123;align&#125;$$ 示例： \begin{align} h(x) =& \frac{1}{\int_xt(x)\mathrm{d}x} \tag{1}\\ f(x) =& \frac{1}{\int_x\eta(x)\mathrm{d}x}g(x)\tag{2} \end{align}持续整理中。。。]]></content>
      <categories>
        <category>LaTeX</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>LaTeX</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++与ROS 回调函数解析]]></title>
    <url>%2Farticle%2FCplusplusAndROSCallbackFunction.html</url>
    <content type="text"><![CDATA[C++中的回调函数： A “callback” is any function that is called by another function which takes the first function as a parameter. 直白点说，就是“函数#”的参数是另一个函数，通过“函数#”调用另一个函数，这个“函数#”就是回调函数。以数学形式来看（虽然不太恰当）：Function(y)和Function(g(x))。Function(y)是一个函数，g(x)也是一个函数，那么Function(g(x))就可以看成是一个回调过程，g(x)就是回调函数。 更直接地说，我们一般都是调用OpenCV里面的库函数，现在关系反过来了，我们要让OpenCV调用一个我们自己写的函数，这个过程就是回调。那个被OpenCV调用的（我们自己写的）函数就是回调函数。接下來举例规范地说一下： 不带参数的回调函数： 12345678910111213141516171819//回调函数 void wordsCallback() &#123; std::cout&lt;&lt;"Hello World!"&lt;&lt;std::endl; &#125; //实现回调函数的"调用函数" void wods(void (*callfuction)()) &#123; callfuction(); &#125; int main(int argc,char* argv[]) &#123; words(wodsCallback); return 0; &#125; 程序的正确输出结果是：Hello World! 带参数的回调函数： 12345678910111213141516171819//回调函数 void wordsCallback(char* s) &#123; std::cout&lt;&lt;s&lt;&lt;std::endl; &#125; //实现带参回调函数的"调用函数" void words(void (*callfuction)(char*),char* s) &#123; callfuction(s); &#125; int main(int argc,char* argv[]) &#123; words(wordsCallback,"Hello World!"); return 0; &#125; 程序的正确输出结果：Hello World! ROS中的回调函数一般来说这个回调函数会用一些比较显著且比较统一的名字：**Callback（如ScanCallback/CameraCallback），它是在订阅话题的时候使用的。所以在使用时，我们需要声明订阅话题的名称，然后选择话题，最后调用Callback函数。） 举个栗子： 1234567891011void imageCallback(const sensor_msgs::ImageConstPtr&amp; msg)&#123; try &#123; cv::imshow("view", cv_bridge::toCvShare(msg, "bgr8")-&gt;image); &#125; catch (cv_bridge::Exception&amp; e) &#123; ROS_ERROR("Could not convert from '%s' to 'bgr8'.", msg-&gt;encoding.c_str()); &#125;&#125; 1image_transport::Subscriber sub_raw_image = it.subscribe("camera/rgb/image_raw", 1, imageCallback); 先声明订阅的话题的名称： 1sub_raw_image 然后，选择我们需要订阅的话题。 1"camera/rgb/image_raw" 题外话，ROS中有很多话题，有的是自己写的，有的来自其他节点发布的。 1代表我们一次性可以缓存多少消息，最后那个就是回调函数了。 1imageCallback ROS中，imageCallback的参数是与话题息息相关的，要跟据订阅的话题来确定参数。 一般来说，程序的主要功能也都是在回调函数中实现的。 或者说，将来自【订阅话题】中的数据，传递给【目标函数】进行处理。 需要的数据，都是要通过话题订阅的，而订阅了就肯定有回调函数。可以把一个个回调函数看成是一个个单独的线程。 只要订阅的消息一更新（当有消息到达topic时），回调函数就会被调用（ROS就会调用imageCallback ()函数），对新的（到达的）数据进行处理，程序就这么不断的进行下去了。 这里我们仍旧举例： 123void forwardCallback(const nav_msgs::Odometry::ConstPtr &amp;forward_msg)&#123;&#125; void imageCallback(const sensor_msgs::ImageConstPtr &amp;image_msg)&#123;&#125; 需要确定的就是这个sensor_msgs::ImageConstPtr和nav_msgs::Odometry::ConstPtr. 使用类作为回调函数： 举个栗子： 12345class Listener&#123;public: void callback(const std_msgs::String::ConstPtr&amp; msg);&#125;; 12Listener listen;ros::Subscriber sub = n.subscribe("chatter", 1000, &amp;Listener::callback, &amp;listen); 如果订阅在Listener内部，你替换最后的参数为关键词this，它意味着订阅会引用类的一部分。 以上！ 附： &amp; 有 “引用” 和 “ 取地址”的含义 int a; int &amp;b = a;上述两行语句执行完之后，a、b表示同一个变量，对其中一个的操作相当于对另一个的操作。 int a; int *b = &amp;a;则b中储存的是a的地址。对*b的任何操作相当于对a的操作。]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>ROS</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++ cout控制输出\流控制]]></title>
    <url>%2Farticle%2FCplusplusCout.html</url>
    <content type="text"><![CDATA[I/O的书写格式I/0流是输入或输出的一系列字节，当程序需要在屏幕上显示输出时，可以使用插入操 作符“&lt;&lt;”向cout输出流中插入字符。例如： 1cout&lt;&lt;”This is a program.\n"； 当程序需要执行键盘输入时，可以使用抽取操作符 “&gt;&gt;”从cin输人流中抽取字符。例如： 12int myAge；cin&gt;&gt;myAge； 不管把什么基本数据类型的名字或值传给流，它都能懂。例如，下面的函数输出字符串和整数： 12345678#include &lt;iostream.h&gt;void main()&#123; cout &lt;&lt; "My name is Jone\n"; cout "the ID is"; cout &lt;&lt; 2; cout &lt;&lt; endl;&#125; 上面的输出也可以在同一行中串连，下面的输出语句与上例输出同样 内容： 1cout &lt;&lt;"My name is Jone\n" &lt;&lt;”the ID is"&lt;&lt; 2 &lt;&lt;endl； 也可以分在几行，提高可读性，下列语句与上例输出同样结果： 1234cout&lt;&lt;"My name is Jonen" //行末无分号&lt;&lt;"the ID is"&lt;&lt;2&lt;&lt;endl； cin可以和cout一样的方式调整行，它自动 识别变量位置和类型。例如： 12int i；float f；long l；cin &gt;&gt;i &gt;&gt;f &gt;&gt;l； cin能够知道抽取的变量之类型，它将对i，f，l分别给出一个整型、浮点型和长整型数。 使用控制符流的默认格式输出有时不能满足特殊要求，如： 12double average=9.400067；cout&lt;&lt;average&lt;&lt;endl； 希望显示的是9.40，即保留两位小数，可是却显示了9.40007；默认显示6位有效位。 用控制符(manipulators)可以对I/O流的格式进行控制。控制符是在头文件iomanip.h中定义的对象。可以直接将控制符插入流中。常用 控制符如表2-4所列。 表 I／O流的常用控制符 控制符 描 述 dec hex oct setfill(c) setdivcision(n) setw(n) setiosflags(ios::fixed) setiosflags(ios::scientific) setiosflags(ios::left) setiosflags(ios::right) setiosflags(ios::skipws) setiosflags(ios::uppercase) setiosflags(ios::lowercase) 置基数为10 置基数为16 置基数为8 没填充字符为c 没显示小数精度为n位 设域宽为n个字符 固定的浮点显示 指数表示 左对齐 右对齐 忽略前导空白 16进制数大写输出 16 进制数小写输出 使用控制符时，要在程序的头上加头文件iomanip.h。 控制浮点数值显示使用setdivcision(n)可控制输出流显示浮点数的数字个 数。C++默认的流输出数值有效位是6。如果setdivcision(n)与setiosflags(ios::fixed)合用，可以控制小数点右边的数字个数。setiosflags(ios::fixed)是用定点方式表示实数。如果与 setiosnags(ios::scientific)合用， 可以控制指数表示法的小数位数。setiosflags(ios::scientific)是用指数方式表示实数。例如，下面的代码分别用浮 点、定点和指数方式表示一个实数： 1234567891011121314151617181920212223//*********************//** ch2_1.cpp **//*********************#include &lt;iostream.h&gt;#include &lt;iomanip.h&gt; //要用到格式控制符void main()&#123; double amount = 22.0/7; cout &lt;&lt;amount &lt;&lt;endl; cout &lt;&lt;setdivcision(0) &lt;&lt;amount &lt;&lt;endl &lt;&lt;setdivcision(1) &lt;&lt;amount &lt;&lt;endl &lt;&lt;setdivcision(2) &lt;&lt;amount &lt;&lt;endl &lt;&lt;setdivcision(3) &lt;&lt;amount &lt;&lt;endl &lt;&lt;setdivcision(4) &lt;&lt;amount &lt;&lt;endl; cout&lt;&lt;setiosflags(ios::fixed); cout &lt;&lt;setdivcision(8) &lt;&lt;amount &lt;&lt;endl; cout&lt;&lt;setiosflags(ios::scientific)&lt;&lt;amount&lt;&lt;endl; cout &lt;&lt;setdivcision(6);//重新设置成原默认设置&#125; 运行结果为： 123456783.14286333.13.143.1433.142857143.14285714e+00 该程序在32位机器上运行通过。在用浮点表示的输出中，setdivcision(n)表示有效位数。第1行输出数值之前没有设置有效位数，所以用流的有效位数默认设置值6：第2个输出设置了有效位数0，C++最小的有效位数为1，所以作为有效位数设置 为1来看待：第3～6行输出按设置的有效位数输出。在用定点表示的输出中，setdivcision(n)表示小数位数。第7行输出是与setiosflags(ios::fixed)合用。所以setdivcision(8)设置的是小数点后面的位数，而非全部数字个 数。在用指数形式输出时，setdivcision(n)表示小数位数。第8行输出用 setiosflags(ios::scientific)来表示指数表示的输出形式。其有效位数沿用上次的设置值8。小数位数截短显示时，进行4舍5入处理。 设置值的输出宽度除了使用空格来强行控制输出间隔外，还可以用 setw(n)控制符。如果一个值需要比setw(n)确定的字符数更多的字符，则该值将使用它所需要的所有字符。例如： 12float amount=3.14159；cout &lt;&lt;setw(4) &lt;&lt;amount &lt;&lt;endl； 其运行结果为：3.14159。它并不按4位宽度，而是按实际宽度输出。如果一个值的字符数比setw(n)确定的字符个数更少，则在数字 字符前显示空白，不同于其他控制符，setw(n)仅仅影响下一个数值输出，换句话说，使用setw设置的间隔方式并不保留其效力。例如： 123456cout&lt;&lt;setw(8)&lt;&lt;10&lt;&lt;20&lt;&lt;endl；//运行结果为：-------1020 运行结果中的下横线表示空 格。整数20并没有按宽度8输出。setw()的默认值为宽度0，即setw(0)，意思是按输出数值的表示宽度输出， 所以20就紧挨10了。若要每个数值都有宽度8，则每个值都要设置： 12cout&lt;&lt;setw(8)&lt;&lt;10&lt;&lt;setw(8) &lt;&lt;20 &lt;&lt;endl； 输出8进制和16进制数3个常用的控制符是hex，oct和dec，它们分别对应16 进制、8进制和10进制数的显示。这3个控制符在iostream.h头文件中定义。例如：12345678910111213//*********************//** ch2_2.cpp **//*********************#include &lt;iostream.h&gt;void main()&#123;int number=1001;cout &lt;&lt;"Decimal:" &lt;&lt;dec &lt;&lt;number &lt;&lt;endl&lt;&lt;"Hexadecimal:" &lt;&lt;hex &lt;&lt;number &lt;&lt;endl&lt;&lt;"Octal:" &lt;&lt;oct &lt;&lt;number &lt;&lt;endl;&#125; 运行结果为：123Decimal：1001Hexadecimal：3e9Octal：1751 1001是一个10进制数，不能把它理解成16进制或8进制数，因为它不是以0x或0开头。但 在输出时， 流根据控制符进行过滤， 使其按一定的进制来显示。用头文件iomanip.h中的 setiosflags(ios::uppercase)可以控制16进制数大写输出。例如,上例中增加一个头文件,对16进制数进行大写控制，即：1234567#include&lt;iostream.h&gt;#include&lt;iomanip.h&gt;//...cout&lt;&lt;"Hexadecimal:"&lt;&lt;hex &lt;&lt;setiosftags(ios::uppercase) &lt;&lt;number&lt;&lt;endl； 便能得到16进制数的大写表示：Hexadecimal：3E9。 设置填充字符setw可以用来确定显示的宽度。默认时，流使用空格符来保证字符间的正确间隔。用setfill控制符可以确定一个非空格的别的字符。Setfill在头文件iomanip·h中定义。例如：12345678910111213141516//*********************//** ch2_3.cpp **//*********************#include &lt;iostream.h&gt;#include &lt;iomanip.h&gt;void main()&#123; cout &lt;&lt;setfill('*') &lt;&lt;setw(2) &lt;&lt;21 &lt;&lt;endl &lt;&lt;setw(3) &lt;&lt;21 &lt;&lt;endl &lt;&lt;setw(4) &lt;&lt;21 &lt;&lt;endl; cout &lt;&lt;setfill(' '); // 恢复默认设置&#125; 运行结果为：12321*21**21 左右对齐输出默认时，I/O流左对齐显示的内容。使用头文件iomanip.h中的 setiosflags(ios::left)和(ios::right)标志，可以控制输出对齐。例如：12345678910111213141516171819//*********************//** ch2_4.cpp **//*********************#include &lt;iostream.h&gt;#include &lt;iomanip.h&gt;void main()&#123;cout &lt;&lt;setiosflags(ios::right) &lt;&lt;setw(5) &lt;&lt;1 &lt;&lt;setw(5) &lt;&lt;2 &lt;&lt;setw(5) &lt;&lt;3 &lt;&lt;endl;cout&lt;&lt;setiosflags(ios::left) &lt;&lt;setw(5) &lt;&lt;1 &lt;&lt;setw(5) &lt;&lt;2 &lt;&lt;setw(5) &lt;&lt;3 &lt;&lt;endl;&#125; 运行结果为：12-----1-----2-----31-----2-----3----- 强制显示小数点和符号当程序输出下面的代码时： 1cout&lt;&lt;10.0/5&lt;&lt;endl； 默认的I/0流会简单地显示2，而非2.0，因为除法的结果是精确的。当 需要显示小数点时，可以用iso::showpoint标志。例如：1234567891011121314//*********************//** ch2_5.cpp **//*********************#include &lt;iostream.h&gt;#include &lt;iomanip.h&gt;void main()&#123;cout &lt;&lt;10.0/5 &lt;&lt;endl;cout&lt;&lt;setiosflags(ios::showpoint) &lt;&lt;10.0/5 &lt;&lt;endl;&#125; 运行结果为：1222.00000 默认时，I/O流 仅在负数之前显示值的符号，根据程序的用途，有时也需要在正数之前加上正号，可以用ios::showpos标志。例如：1234567891011121314//*********************//** ch2_6.cpp **//*********************#include &lt;iostream.h&gt;#include &lt;iomanip.h&gt;void main()&#123;cout &lt;&lt;10 &lt;&lt;" " &lt;&lt;-20 &lt;&lt;endl;cout&lt;&lt;setiosflags(ios::showpos) &lt;&lt;10 &lt;&lt;" " &lt;&lt;-20 &lt;&lt;endl;&#125; 运行结果为：1210 -20+10 -20 小 结变量是程序分配给某个内存位置的名字，它可以存放信息。程序在使用变量前，必须先说明变量名和变量 类型。不同的变量不能同名，变量名应该尽量反映出变量的用途，以增强程序的可读性。在程序运行中，常量的值不可改变。常量也有各 种数据类型，也占有存储空间。各种数据类型的数据表示有一定的范围，越过了该范围， C++就要对该数据进行截取，使得数据不再正确。利用cout可以输出各种数据类型的数据，可以多种方式在屏幕上显示输出信息(包括特殊符号)。C++兼容C的库函数，所以printf()和 scanf()也可照常使用。]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Companion computer 对UAV的外部控制]]></title>
    <url>%2Farticle%2FCompanionComputer2Pixhawk.html</url>
    <content type="text"><![CDATA[Enter password to read. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>UAV</category>
      </categories>
      <tags>
        <tag>ROS</tag>
        <tag>MAVROS</tag>
        <tag>Offboard</tag>
        <tag>Pixhawk</tag>
        <tag>UAV</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spark部署架构方式]]></title>
    <url>%2Farticle%2FSparkArchitecturalSchemes.html</url>
    <content type="text"><![CDATA[Spark架构 用Spark架构具有如下优点： 实现一键式安装和配置、线程级别的任务监控和告警 降低硬件集群、软件维护、任务监控和应用开发的难度 便于做成统一的硬件、计算平台资源池 注：Spark Streaming无法实现毫秒级的流计算，因此，对于需要毫秒级实时响应的企业应用而言，仍然需要采用流计算框架（如Storm） Spark+Hadoop架构Hadoop和Spark的统一部署缘由： Hadoop生态系统中的一些组件所实现的功能，目前还是无法由Spark取代的，比如，Storm 现有的Hadoop组件开发的应用完全转移到Spark上需要一定的成本 不同的计算框架统一运行在YARN中，可以带来如下好处： 计算资源按需伸缩 不用负载应用混搭，集群利用率高 共享底层存储，避免数据跨集群迁移]]></content>
      <categories>
        <category>Big Data</category>
      </categories>
      <tags>
        <tag>Big Data</tag>
        <tag>大数据</tag>
        <tag>Spark</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spark SQL、Streaming and MLlib]]></title>
    <url>%2Farticle%2FSparkSQLStreamingandMLlib.html</url>
    <content type="text"><![CDATA[Spark SQL 支持多种结构化数据，如JSON, Hive, Parquet等 Can be created from external data sources, from the results of queries, or from regular RDDs Spark Streaming Spark MLlib支持多类机器学习算法。]]></content>
      <categories>
        <category>Big Data</category>
      </categories>
      <tags>
        <tag>Big Data</tag>
        <tag>大数据</tag>
        <tag>Spark</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spark RDD学习笔记]]></title>
    <url>%2Farticle%2FSparkRDD.html</url>
    <content type="text"><![CDATA[RDD：Resilient Distributed Dataset（弹性分布式数据集），是分布式内存的一个抽象概念，提供了一种高度受限的共享内存模型。 RDD分为Action（动作）和Transformation（转换）两种操作类型。 RDD的转换接口都非常简单，都是类似map、filter、groupBy、join等粗粒度的数据转换操作。 执行方式Lazy Fashion（惰性调用） ​ DAG：Directed Acyclic Graph（有向无环图），反映RDD之间的依赖关系。 RDD运行过程 创建RDD对象； SparkContext负责计算RDD之间的依赖关系，构建DAG； DAGScheduler负责把DAG图分解成多个Stage，每个Stage中包含了多个Task，每个Task会被TaskScheduler分发给各个WorkerNode上的Executor去执行。 参考示例12345text_file = sc.textFile("hdfs://skn-0exybxsb-hadoop-master:9000/use/ubuntu/sample1")counts = text_file.flatMap(lambda line: line.split(" "))\ .map(lambda word: (word, 1))\ .reduceByKey(lambda a, b: a + b)counts.collect()]]></content>
      <categories>
        <category>Big Data</category>
      </categories>
      <tags>
        <tag>Big Data</tag>
        <tag>大数据</tag>
        <tag>Spark</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spark集群管理架构]]></title>
    <url>%2Farticle%2FSparkCluster.html</url>
    <content type="text"><![CDATA[Spark集群管理架构包括： 集群资源管理器（ClusterManager） 运行作业任务的工作节点（Worker Node） 每个应用的任务控制节点（Driver） 每个工作节点上负责具体任务的执行进程（Executor） where 资源管理器可以自带或Mesos或YARN Spark集群管理流程 首先为应用构建起基本的运行环境，即由Driver创建一个SparkContext，进行资源的申请、任务的分配和监控。 资源管理器为Executor分配资源，并启动Executor进程。 SparkContext根据RDD的依赖关系构建DAG图，DAG图提交给DAGScheduler解析成Stage，然后把一个个TaskSet提交给底层调度器TaskScheduler处理；Executor向SparkContext申请Task，TaskScheduler将Task发放给Executor运行，并提供应用程序代码。 Task在Executor上运行，把执行结果反馈给TaskScheduler，然后反馈给DAGScheduler，运行完毕后写入数据并释放所有资源 。 优点与Hadoop MapReduce计算框架相比，Spark所采用的Executor有两个优点： 利用多线程来执行具体的任务，减少任务的启动开销。 Executor中有一个BlockManager存储模块，会将内存和磁盘共同作为存储设备，有效减少IO开销。]]></content>
      <categories>
        <category>Big Data</category>
      </categories>
      <tags>
        <tag>Big Data</tag>
        <tag>大数据</tag>
        <tag>Spark</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[什么是Spark？]]></title>
    <url>%2Farticle%2FWhatsSpark.html</url>
    <content type="text"><![CDATA[简介：一个围绕速度、易用性和复杂分析构建的通用大数据计算框架。 来源：Spark最初由美国加州伯克利大学（UCBerkeley）的AMP实验室于2009年开发，是基于内存计算的大数据并行计算框架，可用于构建大型的、低延迟的数据分析应用程序。 ​ 2013年Spark加入Apache孵化器项目后发展迅猛，如今已成为Apache软件基金会最重要的三大分布式计算系统开源项目之一（Hadoop、Spark、Storm）。 运行速度快，消耗资源少 基于内存计算，全局优化的工作流编排 比MapReduce快100倍（内存），或10倍（磁盘） 计算跟着数据走 简单易用，支持交互式查询 易用的APIs（Python, JAVA, Scala, and SQL） 丰富的内置库函数 包含多个库的全栈式平台，良好的生态系统 减轻运维，且各组件之间易于集成 支持所有Hadoop生态系统中的数据源 可以基于云计算 Spark生态系统组件应用场景]]></content>
      <categories>
        <category>Big Data</category>
      </categories>
      <tags>
        <tag>Big Data</tag>
        <tag>大数据</tag>
        <tag>Spark</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MapReduce On Yarn工作原理]]></title>
    <url>%2Farticle%2FMapReduceWihtYARN.html</url>
    <content type="text"><![CDATA[用户向Yarn提交一个MapReduce应用，Yarn会分两个阶段运行： ResourceManager启动MRAppMaster 其中，MapReduce的ApplicationMaster负责管理作业生命周期 MRAppMaster创建应用程序，申请资源，并监控其运行过程，直到运行成功 MRAppMaster的3种运行模式：本地，uber，非uber； MapReduce on Yarn工作流程： 用户向YARN中提交应用程序/作业，包括MRAppMaster程序、启动MRAppMaster的命令、用户程序等； ResourceManager为作业分配第一个Container，并与对应的NodeManager通信，要求它在这个Containter中启动该作业的MRAppMaster； MRAppMaster首先向ResourceManager注册，这样用户可以直接通过ResourceManager查询作业的运行状态；然后它将为各个任务申请资源并监控任务的运行状态，直到运行结束。即重复步骤4-7； MRAppMaster采用轮询方式通过RPC请求向RM申请和领取资源； MRAppMaster申请到资源后，便与对应的NM通信，要求它启动任务； NodeManager使用脚本启动任务（环境变量，jar包等）； 各个任务通过RPC协议向MRAppMaster汇报自己的状态和进度，以让MRAppMaster 随时掌握各任务的运行状态，从而可以在任务失败时重新启动任务；在作业运行过程中，用户可随时通过RPC向ApplicationMaster查询作业当前运行状态； 作业完成后，MRAppMaster向ResourceManager注销并关闭自己；]]></content>
      <categories>
        <category>Big Data</category>
      </categories>
      <tags>
        <tag>Big Data</tag>
        <tag>大数据</tag>
        <tag>Hadoop</tag>
        <tag>MapReduce</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[什么是大数据？]]></title>
    <url>%2Farticle%2FWhatsBigData.html</url>
    <content type="text"><![CDATA[什么是大数据？四个“V”： 海量的数据规模（Volume） 快速的数据流转和动态的数据体系（Velocity） 多样的数据类型（Variety） 巨大的数据价值（Value） Wikipedia：大数据是指用常用的软件获取、管理和处理数据所耗时间超过可容忍时间的数据集； 数据仓库or生命周期]]></content>
      <categories>
        <category>Big Data</category>
      </categories>
      <tags>
        <tag>Big Data</tag>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[开机出现“CPU fan error”错误的解决方案]]></title>
    <url>%2Farticle%2FCPUFanError.html</url>
    <content type="text"><![CDATA[问题描述：开机出现“CPU fan error”错误的解决方案 原因分析： CPU风扇线接触不良 系统BIOS检测不到CPU风扇的转速 风扇工作不正常或转速太低 风扇电源线接错了 主板电池没电了 解决方案： CPU风扇线接触不良 重新将CPU风扇线拔插下 系统BIOS检测不到CPU风扇的转速 开机后按【Del】进入【BIOS】选项，进入【Power→Hardware monitor】，你会看到有三个在一起的分别是CPU FAN SPEED;CHASSIS FANSPEED;POWER FAN SPEED，将第一项改成【IGNORED】，第二项改成【N/A】，第三项改成【IGNORED】。 风扇工作不正常或转速太低 风扇工作时间过长，里面的润滑油干了，导致风扇转速变慢了，在风扇的内部加点润滑油，加大风扇的转速会降低您机箱内部的温度，以至于不会使【CPU】烧坏。 风扇电源线接错了 一般主板上都有多个风扇的插口，【CPU】的风扇应该插在【CPU_F】这个上面，如果不插在这里虽然风扇正常，但是主板会提示错误。将【CPU】风扇的电源插头插到相应的位置，一般问题可以解决。 主板电池没电了 将主板上的【COMS】电池拆下来，然后等几分钟后装回去，就可以将主板【COMS】放电恢复默认;最后在【BIOS】里面使用默认设置。 以上几点就是开机出现【CPU fan error】的提示的原因和解决办法，CPU和风扇之间硅胶没了，导致热量散发不出去，机箱内灰尘太多也会导致开机出现【CPU fan error】的提示]]></content>
      <categories>
        <category>Issues</category>
      </categories>
      <tags>
        <tag>Issues</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于ROS测试Caffe MobileNet-SSD【通用】]]></title>
    <url>%2Farticle%2FTestCaffeMobileNetSSD.html</url>
    <content type="text"><![CDATA[在测试的过程中和群友们仔细的探讨了下，很快的解决了测试中遇见的一些细节问题，学东西还是尽量和周围的人一起学，毕竟老话说过“人多力量大！”。 自己一个人也不是不可以，但是往往要比很多人一起探讨花费两倍或者五六倍的时间，所以强烈建议要有那么几个共同学习的小圈子。 修改demo.py12# 设置成绝对路径caffe_root = '/home/cong/catkin_ws/src/ros_caffe/caffe/' 修改solver_test.prototxt有GPU，则不需要修改配置文件，如果没有GPU，则需要修改配置文件 solver_test.prototxt 123# 将solver_mode:GPU 改为 solver_mode:CPU# solver_mode:GPUsolver_mode:CPU 运行demo.py12cd catkin_ws/src/ros_caffe/caffe/examples/MobileNet-SSD/python demp.py 在图像检测输出的界面，按回车或者其他按键，会检测下一张。 Debugs1234# BugImportError: No module named skimage.io# Debugpip install scikit-image 1234# BugImportError: No module google.protobuf.internal# Debugpip install protobuf 完成上面安装步骤后，执行以下命令重新编译： 1234make cleanmake -j8make pymake test -j8]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>ROS</tag>
        <tag>Caffe</tag>
        <tag>SSD</tag>
        <tag>MobileNet</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于ROS安装Caffe和SSD【通用】]]></title>
    <url>%2Farticle%2FROSCaffeSSDMobileNet.html</url>
    <content type="text"><![CDATA[Enter password to read. Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>ROS</category>
      </categories>
      <tags>
        <tag>ROS</tag>
        <tag>Caffe</tag>
        <tag>SSD</tag>
        <tag>MobileNet</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ros::spin()和ros::spinOnce()解析]]></title>
    <url>%2Farticle%2FROSSpinAndSpinOnce.html</url>
    <content type="text"><![CDATA[ros::spin()这句话的意思是循环且监听反馈函数（callback）。循环就是指程序运行到这里，就会一直在这里循环了。监听反馈函数的意思是，如果这个节点有callback函数，那写一句ros::spin()在这里，就可以在有对应消息到来的时候，运行callback函数里面的内容。就目前而言，以我愚见，我觉得写这句话适用于写在程序的末尾（因为写在这句话后面的代码不会被执行），适用于订阅节点，且订阅速度没有限制的情况。 ros::spinOnce()这句话的意思是监听反馈函数（callback）。只能监听反馈，不能循环。所以当你需要监听一下的时候，就调用一下这个函数。这个函数比较灵活，尤其是我想控制接收速度的时候。配合ros::ok()效果极佳。例如 123456ros::Rate loop_rate(10);while(ros::ok())&#123; ros::spinOnce(); loop_rate.sleep();&#125; 可以控制10Hz速度，运行callback函数，非常方便。如果只有 1234while(ros::ok())&#123; ros::spinOnce();&#125; 这就等于ros::spin()。 注意这两个函数只和接收回调函数（callback）有关，和发布并没有关系。如果想循环发布，只能循环写publish()。见参考文献[1]的发布节点示例。我这次出问题就是和发布弄混了。我以为写了spin()可以循环发布的，后来发现并不是。 参考文献 Writing a Simple Publisher and Subscriber (C++) Significance of ros::spinOnce()]]></content>
      <categories>
        <category>ROS</category>
      </categories>
      <tags>
        <tag>ROS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于ROS与Gazebo的Pixhawk仿真]]></title>
    <url>%2Farticle%2FROSGazeboPixhawk.html</url>
    <content type="text"><![CDATA[心路历程 因为在之前搭建深度学习Caffe框架的过程中安装了Anaconda，因此后面搭建Pixhawk+Gazebo仿真环境时，不断出错（错误如下方所示）。 反反复复卸载安装相关组件，尝试了各种办法，花了至少4天时间，最终还是没能解决问题。 之后，为了排除其他因素影响，我在Windows下面直接搭了虚拟机，尝试着一步步搭建，终于可以跑通了。 在这几天的摸爬滚打的过程中，过程虽然煎熬，但自己也学习了不少Linux相关知识，对这个系统了解的程度也比以前深了些。 123456789&gt;/home/cong/src/Firmware/build/posix_sitl_default/build_gazebo/Float.pb.h:12:2: error: &gt;#error This file was generated by a newer version of protoc which is&gt; ^&gt;/home/cong/src/Firmware/build/posix_sitl_default/build_gazebo/Float.pb.h:13:2: error: &gt;#error incompatible with your Protocol Buffer headers. Please update&gt; ^&gt;/home/cong/src/Firmware/build/posix_sitl_default/build_gazebo/Float.pb.h:14:2: error: &gt;#error your headers.&gt; 安装ROS一定要确定Ubuntu与ROS的版本对应 如果安装的是ros-kinetic-desktop-full，其自带gazebo7 ROS发布日期 ROS版本 对应Ubutnu版本 2016.3 ROS Kinetic Kame Ubuntu 16.04 (Xenial) / Ubuntu 15.10 (Wily) 2015.3 ROS Jade Turtle Ubuntu 15.04 (Wily) / Ubuntu LTS 14.04 (Trusty) 2014.7 ROS Indigo Igloo Ubuntu 14.04 (Trusty) 2013.9 ROS Hydro Medusa Ubuntu 12.04 LTS (Precise) 2012.12 ROS Groovy Galapagos Ubuntu 12.04 (Precise) … … … 添加源： 1sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" &gt; /etc/apt/sources.list.d/ros-latest.list' 或添加国内源： 1sudo sh -c '. /etc/lsb-release &amp;&amp; echo "deb http://mirrors.ustc.edu.cn/ros/ubuntu/ $DISTRIB_CODENAME main" &gt; /etc/apt/sources.list.d/ros-latest.list' 设置秘钥： 1sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key 0xB01FA116 安装最新桌面版： 1234# 更新源sudo apt-get update# 安装 ros-kinetic-desktopsudo apt-get install ros-kinetic-desktop-full 初始化ROS初始化rosdep： 12sudo rosdep initrosdep update 初始化环境变量: 12echo "source /opt/ros/kinetic/setup.bash" &gt;&gt; ~/.bashrcsource ~/.bashrc 上面两句非常非常重要，很多小伙伴在日常的开发过程中，有的找不到 Package, 找不到node, 很多情况下都是没有添加source。 创建catkin工作空间： 1234mkdir -p ~/catkin_ws/srccd ~/catkin_ws#可以测试下catkin_make 安装MAVROS1sudo apt-get install ros-kinetic-mavros ros-kinetic-mavros-extras ros-kinetic-control-toolbox 下载一些Geoid Model dataset： 1sudo /opt/ros/kinetic/lib/mavros/install_geographiclib_datasets.sh 外部控制程序创建外部控制程序包 12cd ~/catkin_ws/srccatkin_create_pkg offboard roscpp mavros geometry_msgs 这一步会创建一个名为offboard的新程序包，这个程序包依赖于roscpp 、mavros以及geometry_msgs。 在offboard目录下生自动成两个文件夹include和src。 将外部控制例程offboard_node.cpp放入刚刚生成的src目录下。然后修改/catkin_ws/src/offboard目录下的CMakeLists.txt文件。取消掉一些注释，生成相应节点（否则会出现找不到节点的错误）。 编译 12cd ~/catkin_wscatkin_make 仿真1234567891011# Terminal 1 切换到固件目录cd ~/src/Firmware# 启动gazebo仿真make posix_sitl_default gazebo# Terminal 2 启动MAVROS,链接到本地ROSroslaunch mavros px4.launch fcu_url:="udp://:14540@127.0.0.1:14557"# Terminal 3 运行外部控制程序rosrun offboard offboard_node# 若出现 [rospack] Error: package 'offboard' not found 执行下面两行命令# echo "source ~/catkin_ws/devel/setup.bash" &gt;&gt; ~/.bashrc# source ~/.bashrc Debugs123456789101112# Bug[FATAL] [1524021465.593366921]: UAS: GeographicLib exception: File not readable /usr/share/GeographicLib/geoids/egm96-5.pgm | Run install_geographiclib_dataset.sh script in order to install Geoid Model dataset!===============================================================================REQUIRED process [mavros-2] has died!process has finished cleanlylog file: /home/cong/.ros/log/0f7b4d4e-42b7-11e8-b72f-3464a913a149/mavros-2*.logInitiating shutdown!===============================================================================# Debugsudo /opt/ros/kinetic/lib/mavros/install_geographiclib_datasets.sh 123456# Bug找不到empy或toml# Debugsudo apt-get install python-pippip install toml]]></content>
      <categories>
        <category>UAV</category>
      </categories>
      <tags>
        <tag>ROS</tag>
        <tag>Pixhawk</tag>
        <tag>Gazebo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu下Pixhawk环境搭建]]></title>
    <url>%2Farticle%2FPixhawkOnUbuntu.html</url>
    <content type="text"><![CDATA[网上很多博客中介绍的方法大多比较久远的了，自己综合参考了不少博客的过程中，还是踩了很多坑，特总结下来，以便后面重搭环境时之需。 官方的配置教程 前期准备 设置权限 1sudo usermod -a -G dialout $USER 安装相关工具 123456789sudo add-apt-repository ppa:george-edison55/cmake-3.x -ysudo apt-get update# 必备软件 python git qtsudo apt-get install python-argparse git-core wget zip python-empy qtcreator cmake build-essential genromfs -y# 仿真工具sudo add-apt-repository ppa:openjdk-r/ppasudo apt-get updatesudo apt-get install openjdk-8-jresudo apt-get install ant protobuf-compiler libeigen3-dev libopencv-dev openjdk-8-jdk openjdk-8-jre clang-3.5 lldb-3.5 -y 卸载模式管理器 1sudo apt-get remove modemmanager 更新包列表和安装下面的依赖包 1234567sudo add-apt-repository ppa:terry.guo/gcc-arm-embedded -ysudo add-apt-repository ppa:team-gcc-arm-embedded/ppasudo apt-get updatesudo apt-get install python-serial openocd \ flex bison libncurses5-dev autoconf texinfo build-essential \ libftdi-dev libtool zlib1g-dev \ python-empy -y 工具链安装（若gcc-arm-none-eabi版本不对）（非必须） 如果以前装过工具链，删除残余 12sudo apt-get remove gcc-arm-none-eabi gdb-arm-none-eabi binutils-arm-none-eabi gcc-arm-embeddedsudo add-apt-repository --remove ppa:team-gcc-arm-embedded/ppa 安装工具链 特殊原因，推荐使用浏览器下载：https://launchpad.net/gcc-arm-embedded/5.0/5-2016-q2-update/+download/gcc-arm-none-eabi-5_4-2016q2-20160622-linux.tar.bz2 1234567pushd .cd ~tar -jxf gcc-arm-none-eabi-5_4-2016q2-20160622-linux.tar.bz2exportline="export PATH=$HOME/gcc-arm-none-eabi-5_4-2016q2/bin:\$PATH"if grep -Fxq "$exportline" ~/.profile; then echo nothing to do ; else echo $exportline &gt;&gt; ~/.profile; fi. ~/.profilepopd 这是安装最新的工具链，版本是5.4。 安装过程 下载代码 123mkdir -p ~/srccd ~/srcgit clone https://github.com/PX4/Firmware.git 初始化 123cd Firmware# 下载相关子模块git submodule update --init --recursive 编译 1make px4fmu-v2_default 成功后显示： 12345[100%] Built target nuttx_px4fmu-v2_default.elfScanning dependencies of target px4[100%] Generating px4fmu-v2.bin[100%] Creating /home/cong/src/Firmware/build/px4fmu-v2_default/px4fmu-v2_default.px4[100%] Built target px4 若报错： 1234-- Configuring incomplete, errors occurred!make[1]: *** /root/src/Firmware/build/nuttx_px4fmu-v2_default: No such file or directory. Stop.Makefile:154: recipe for target 'px4fmu-v2_default' failedmake: *** [px4fmu-v2_default] Error 2 解决办法：安装最新gcc-arm-none-eabi版本 上传Pixhawk1sudo make px4fmu-v2_default upload Debug:内存溢出： https://dev.px4.io/en/debug/faq.html 12345678910region `flash' overflowed by 24405 bytescollect2: error: ld returned 1 exit statusplatforms/nuttx/CMakeFiles/nuttx_px4fmu-v2_default.elf.dir/build.make:187: recipe for target 'nuttx_px4fmu-v2_default.elf' failedmake[3]: *** [nuttx_px4fmu-v2_default.elf] Error 1CMakeFiles/Makefile2:5057: recipe for target 'platforms/nuttx/CMakeFiles/nuttx_px4fmu-v2_default.elf.dir/all' failedmake[2]: *** [platforms/nuttx/CMakeFiles/nuttx_px4fmu-v2_default.elf.dir/all] Error 2Makefile:105: recipe for target 'all' failedmake[1]: *** [all] Error 2Makefile:153: recipe for target 'px4fmu-v2_default' failedmake: *** [px4fmu-v2_default] Error 2 解决方法： 编译器版本太低。将arm-none-eabi升级到最新版本 参考本文上面的教程 减少不必要的模块 /Firmware/cmake/configs/nuttx_px4fmu-v2_default.cmake 注释： 123456789#drivers/px4flow#drivers/distance_sensor/ll40ls#drivers/distance_sensor/mb12xx#drivers/distance_sensor/sf0x#drivers/distance_sensor/sf1xx#drivers/distance_sensor/srf02#drivers/distance_sensor/srf02_i2c#drivers/distance_sensor/teraranger#drivers/distance_sensor/tfmini ​]]></content>
      <categories>
        <category>UAV</category>
      </categories>
      <tags>
        <tag>Pixhawk</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于ROS和 MAVROS对Pixhawk进行外部控制]]></title>
    <url>%2Farticle%2FUsingROSAndMAVROSOffboardControlPixhawk.html</url>
    <content type="text"><![CDATA[概述PIxhawk（中文译为PX4）是一个软、硬件开源项目（遵守BSD协议），目的在于为学术、爱好和工业团体提供一款低成本高性能的高端的自驾仪。这个项目源于 ETH Zurich (苏黎世联邦理工大学)的计算机视觉与几何实验室的PIXHAWK项目、并得到了自主系统实验室和 自动控制实验室的支持 ，以及一些出色的个人(Contact and Credits)也参与其中，包括 3D Robotics 和 international 3DR distributors的成员。 协作计算机（Companion computer）可以与Pixhawk飞控相连，读取飞控中的状态信息，同时对飞控发送指令。并且可以作为一个更高性能的计算平台，可以运行图像识别、机器学习、实时路径规划等程序，为开源无人机带来了无限可能。 本文将介绍如何使用ROS控制无人机和协作计算机（Companion computer），以便轻松地连接电脑。PX4网站上有原始的教程，但是逻辑上有点混乱，以下是我查阅了很多资料做出的一个归档和总结，以及自己的一下思路。 什么是ROS？ROS（Robot Operating System，简称“ROS”）是一个适用于机器人的开源的元操作系统。 ROS 的主要目标是为机器人研究和开发提供代码复用的支持。它提供类似操作系统所提供的功能，包含硬件抽象描述、底层驱动程序管理、共用功能的执行、程序间的消息传递、程序发行包管理，它也提供一些工具程序和库用于获取、建立、编写和运行多机整合的程序。 学习ROS相关链接：ROS探索总结 什么是 MAVROS？MAVROS是ROS的一个软件包，允许在运行ROS的计算机、支持MAVLink的飞控板以及支持MAVLink的地面站之间通讯。 MAVlink由17个字节组成，包括消息ID、目标ID和数据。其中消息ID显示是什么数据，可以在messageID命令集中看到消息ID。 这使得MAVLink能够从同一个通道传输信息，从多个无人机获取信息。另外，消息也可以通过无线信号进行传输。]]></content>
      <categories>
        <category>ROS</category>
      </categories>
      <tags>
        <tag>ROS</tag>
        <tag>MAVROS</tag>
        <tag>Offboard</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jetson TK1 or TX1 刷系统以及配置Caffe教程]]></title>
    <url>%2Farticle%2FJetsonTKoTXWithCaffe.html</url>
    <content type="text"><![CDATA[JetPack 3.1 remains the current production release, supporting Jetson TX2, Jetson TX1, and Jetson TK1 Developer Kits. 配置 JetPack 2.3JetPack 2.3 是NVIDIA最新发布的用于在Jetson系列嵌入式平台上部署开发环境的开发包，它包含 64bit 的 Ubuntu16.04 操作系统，CUDA 8.0，cuDNN 5.1，以及用来加速CNN推断速度的TensorRT. 对于JetPack 2.3更详细的介绍参见 NVIDIA JetPack 2.3 介绍 配置 JetPack 2.3 需要： 一台装有 Ubuntu 64位操作系统的主机：由于 JetPack 是先在主机上下载并安装相关的包，然后刷到 TX 1上，所以需要一台主机。本人在14.04上测试没有问题，其它系统没有测试。 一根网线：连接 TX 1 与路由器 显示器，键鼠 等 下载 JetPack 2.3在主机上通过 NVIDIA 官方链接 下载 JetPack 2.3，并新建一个文件夹存放下载下来的文件，文件名大概为 JetPack-L4T-2.3-linux-x64.run在/home/usrname/目录下新建文件夹，可以命名为 JetPack : 123cd ~mkdir JetPackcp ~/Downloads/JetPack-L4T-2.3-linux-x64.run ~/JetPack 安装 JetPack 2.3为 JetPack-L4T-2.3-linux-x64.run 增加执行权限12cd ~/JetPackchmod +x JetPack-L4T-2.3-linux-x64.run 执行 JetPack-L4T-2.3-linux-x64.run ，点击 Next1./JetPack-L4T-2.3-linux-x64.run 指明安装路径后选择部署的开发平台此处我们选择 Jetson TX1，同样也支持 TK 1的部署 弹出 JetPack L4T Component Manager 对话框由于我已经安装好了所有的包，所以这边的Action一栏是no action，如果没有安装过的话，会显示install xxx。这里点击Next后，接受所有的申明，就开始了漫长的下载与安装…（我等了10多个小时） 这里大家可以选择不安装OpenCV for Tegra，因为这个版本是2.4.13，对于USB摄像头的读取支持不是很好，另外对于CUDA静态库的读取也有些问题，所以不推荐安装，稍后会提示大家安装 OpenCV 3.1 网络配置和端口选择安装完成后进入网络配置选项，选择通过路由器连接互联网，同时将TX1连接到与主机同一个路由器上 选择eth0端口，点击Next 设置 TX 1 为 Force USB Recovery Mode (强制USB恢复模式)弹出如图所示终端窗口： 按照提示，将TX1设置为强制USB恢复模式 关闭设备，移除电源适配器 用自带的Micro USB 转 USB 数据线连接主机与TX1 连接电源适配器 按下POWER按钮 按住FORCE RECOVERY 按钮不放开，同时按一下RESET按钮，等待两秒钟，松开FORCE RECOVERY 按钮 完成上述步骤后，可以在主机上通过 lsusb命令查看是否含有Nvidia Corp设备，确认存在后敲击Enter，开始将操作系统以及开发包拷贝到TX1，中途连接TX1的显示器会显示Ubuntu 16.04 桌面系统 待安装部署完成后，在主机上退出 JetPack L4T 即可，这样就完成了 JetPack 2.3 的配置 运行示例我们可以在TX1上运行几个示例，验证下 CUDA 8.0 是否安装成功 1./NVIDIA_CUDA-8.0_Samples/bin/aarch64/linux/release/smokeParticles 配置 OpenCV 3.1OpenCV 3.1 是目前较为稳定的版本，因此推荐大家在TX1上安装OpenCV 3.1 安装OpenCV有两种方式： 安装预建的OpenCV4Tegra库（是OpenCV的CPU和GPU优化版本） 源码安装（如果您想要最新的OpenCV代码，或者您想要自定义OpenCV库，并且不希望NVIDIA的OpenCV4Tegra的CPU和多核优化。请注意，您将无法获得如OpenCV4Tegra的全部优化性能。） 参考文献：TK1入门教程软件篇-安装OpenCV 下载 OpenCV 3.1下载 OpenCV for Linux/Mac (Version 3.1) 安装依赖库123456sudo apt-add-repository universesudo apt-get updatesudo apt-get install -y build-essential make cmake cmake-curses-gui g++sudo apt-get install -y libavformat-dev libavutil-dev libswscale-devsudo apt-get install -y libv4l-dev libeigen3-dev libglew1.6-dev libgtk2.0-dev 编译安装OpenCV 3.11234567cd ~unzip opencv-3.1.0.zipcd opencv-3.1.0mkdir buildcd buildcmake -DWITH_CUDA=ON -DCUDA_ARCH_BIN="5.3" -DCUDA_ARCH_PTX="" -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF -DCUDA_FAST_MATH=ON ..sudo make -j4 install 编译好的OpenCV库会默认安装到 /usr/local/文件夹下 注意：由于CUDA 8.0不支持OpenCV的 GraphCut 算法，可能出现以下错误： 123456789/home/usrname/opencv-3.1.0/modules/cudalegacy/src/graphcuts.cpp:120:54: error: ‘NppiGraphcutState’ has not been declared typedef NppStatus (*init_func_t)(NppiSize oSize, NppiGraphcutState** ppStat ^/home/usrname/opencv-3.1.0/modules/cudalegacy/src/graphcuts.cpp:135:18: error: ‘NppiGraphcutState’ does not name a type operator NppiGraphcutState*() ^/home/usrname/opencv-3.1.0/modules/cudalegacy/src/graphcuts.cpp:141:9: error: ‘NppiGraphcutState’ does not name a type NppiGraphcutState* pState;....... 此时需要修改OpenCV源码，使其不编译graphcuts.cpp 即可进入opencv-3.1.0/modules/cudalegacy/src/目录，修改graphcuts.cpp文件，将： 12#include "precomp.hpp"#if !defined (HAVE_CUDA) || defined (CUDA_DISABLER) 修改为 12#include "precomp.hpp"#if !defined (HAVE_CUDA) || defined (CUDA_DISABLER) || (CUDART_VERSION &gt;= 8000) 重新编译即可 配置 Caffe 开发环境此处有很详细的指导，复制过来 安装依赖库12345678910111213sudo add-apt-repository universesudo apt-get update -ysudo apt-get install cmake -y# General Dependenciessudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev \libhdf5-serial-dev protobuf-compiler -ysudo apt-get install --no-install-recommends libboost-all-dev -y# BLASsudo apt-get install libatlas-base-dev -y# Remaining Dependenciessudo apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev -ysudo apt-get install python-dev python-numpy -y 编译 Caffe123git clone https://github.com/BVLC/caffe.git cd caffe cp Makefile.config.example Makefile.config 修改Makefile.config: 12345678# cuDNN acceleration switch (uncomment to build with cuDNN).USE_CUDNN := 1# Uncomment if you're using OpenCV 3OPENCV_VERSION := 3# Uncomment to support layers written in Python (will link against Python libs)WITH_PYTHON_LAYER := 1 由于hdf5库目录更改，所以需要单独添加： 12INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include /usr/include/hdf5/serial/LIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib /usr/lib/aarch64-linux-gnu/hdf5/serial/ 之后编辑即可 12make -j4 allmake -j4 runtest 为了更好地使用pycaffe ，建议安装： 123sudo apt-get install python-numpy python-setuptools python-pip cython python-skimage python-protobufmake pycaffe 到这里Caffe开发环境就配置好了！可以测试一下，输出AlexNet的时间测试结果： 12cd ~/caffe./build/tools/caffe time --gpu 0 --model ./models/bvlc_alexnet/deploy.prototxt]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Deep Learning</tag>
        <tag>Caffe</tag>
        <tag>深度学习</tag>
        <tag>Jetson TK1</tag>
        <tag>Jetson TX1</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OpenCV 3.3 DNN模块的认识]]></title>
    <url>%2Farticle%2FOpenCVWithDNN.html</url>
    <content type="text"><![CDATA[在OpenCV3.3版本发布中把DNN模块从扩展模块移到了OpenCV正式发布模块中，当前DNN模块最早来自Tiny-dnn，可以加载预先训练好的Caffe模型数据，OpenCV做了近一步扩展支持所有主流的深度学习框架训练生成与导出模型数据加载。 按照官方介绍，DNN现在有下面几点特性： 无需任何依赖新加入的DNN模块不需要任何依赖，除了protobuf……而protobuf被加入到OpenCV的thirdparty了。简直是贴心至极有没有？ 支持以下框架 Caffe 1 TensorFlow Torch/PyTorch 虽然还没有支持caffe2，不过我现在就已经很满足了。 支持很多种类的层 AbsVal AveragePooling BatchNormalization Concatenation Convolution (including dilated convolution) Crop Deconvolution, a.k.a. transposed convolution or full convolution DetectionOutput (SSD-specific layer) Dropout Eltwise (+, *, max) Flatten FullyConnected …… 还有很多，就不一一列举了， 估计绝大部分人也用不上。。。 以下网络经过了测试且可用 AlexNet GoogLeNet v1 (also referred to as Inception-5h) ResNet-34/50/… SqueezeNet v1.1 VGG-based FCN (semantical segmentation network) ENet (lightweight semantical segmentation network) VGG-based SSD (object detection network) MobileNet-based SSD (light-weight object detection network) 但是现在OpenCV貌似只能加载训练好的网络，caffe的，TF的，Torch的，只能训练好之后拿来用，但是不能自己训练网络。 现在看来加入DNN模块算是众望所归，虽然有点晚，虽然功能还不够完善，但是仍然值得期待。 以GoogleNet Caffe模型举例说明OpenCV通过支持加载这些预先训练好的模型，实现图像分类、对象检测、语义分割、风格迁移等功能。支持Android/iOS等移动端平台开发。下面我们就以OpenCV3.3 使用Caffe的GoogleNet数据模型为例，实现对图像常见分类，OpenCV3.3的DNN模块使用的模型支持1000种常见图像分类、googlenet深度学习网络模型是2014图像分类比赛的冠军、首先是下载相关的数据模型文件 bvlc_googlenet.caffemodel bvlc_googlenet.prototxt 其中：prototxt定义了网络结构，caffemodel是训练后的权重。 文本文件只有你下载了OpenCV3.3解压缩之后就会在对应的目录发现。模型文件需要从以下地址下载即可： http://dl.caffe.berkeleyvision.org/bvlc_googlenet.caffemodel]]></content>
      <categories>
        <category>Computer Vision</category>
      </categories>
      <tags>
        <tag>计算机视觉</tag>
        <tag>Computer Vision</tag>
        <tag>OpenCV</tag>
        <tag>DNN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[批量网页图片下载器 NeoDownloader]]></title>
    <url>%2Farticle%2FNeoDownloader.html</url>
    <content type="text"><![CDATA[NeoDownloader功能介绍：它还可以即时预览图片、幻灯显示、桌布设置…… 等功能，配合 Express Thumbnail Creator 软件更是可以快捷地制作网络相簿！推荐使用！NeoDownloader可以批量从任何网站下载任何文件，它主要是为了帮助您自动下载和查看您最喜爱的图片，照片，壁纸，视频，MP3音乐，和任何其他文件。 NeoDownloader配备了一个大型的在线数据库，随时可以下载的项目：数以千计的各种壁纸，高品质的照片，名人和美丽的女孩，由著名艺术家和摄影师，有趣的图片和GIF动画的作品。 下载地址：链接：https://pan.baidu.com/s/1jIH334U 密码：0z64 NeoDownloader怎么用？ 新建方案： 设置下载图片保存目录地址，以及勾上复制网站的文件夹结构！ 开始方案： 文件规律重命名下载地址：链接：https://pan.baidu.com/s/1gfs7hLL 密码：lnhp]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>爬图</tag>
        <tag>NeoDownloader</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[目标检测方法汇总]]></title>
    <url>%2Farticle%2FTargetDetectionAlgorithm.html</url>
    <content type="text"><![CDATA[目标检测方法分类第一，已知目标的先验知识。 在这种情况下检测目标有两类方法，第一类方法是用目标的先验知识训练一堆弱分类器，然后这些弱分类器一起投票来检测目标，如Boosting, Random forest 都是这个思路，大家熟知的Adaboost人脸检测也是如此。第二类方法是根据先验知识找到目标和非目标的最佳划分线，如SVM.这两类方法各成一家，各有所长，都有着不错的表现。 第二，未知目标的先验知识。 此时不知道要检测的目标是什么，于是什么是目标就有了不同的定义。一种方法是检测场景中的显著目标，如通过一些特征表达出场景中每个像素的显著性概率，然后找到显著目标。另一种方法就是检测场景当中的运动目标了。 经典目标检测方法1、背景差分法 在检测运动目标时，如果背景是静止的，利用当前图像与预存的背景图像作差分，再利用阈值来检测运动区域的一种动态目标识别技术。 背景差分算法适用于背景已知的情况，但难点是如何自动获得长久的静态背景模型。 Matlab中单纯的背景差分直接是函数imabsdiff（X,Y）就可以。 2、帧差分法 利用视频序列中连续的两帧或几帧图像的差来进行目标检测和提取。在运动的检测过程中，该方法利用时间信息，通过比较图像中若干连续帧获得对应像素点的灰度差值，如果均大于一定的阈值T2，则可以判断该位置存在运动的目标。适合于动态变化场景。 3、光流场法 利用相邻两帧中对应像素的灰度保持原理来评估二维图像的变化。能够较好的从背景中检测到相关前景目标，甚至是运动屋里中的部分运动目标，适用于摄像机运动过程中相对运动目标的检测。 开口问题、光流场约束方程的解的不唯一性问题，不能正确的表示实际的运动场。 例子如下： 首先，在一帧图像内随机均匀选取k个点，并滤除那些邻域纹理太光滑的点，因为这些点不利于计算光流。 然后，计算这些点与上一帧图像的光流矢量，如上右图，此时已经可以看出背景运动的大概方向了。 接下来的这一步方法因人而异了。 2007年CVPR的一篇文章Detection and segmentation of moving objects in highly dynamic scenes的方法是把这些光流点的（x, y, dx, dy, Y, U, V)7个特征通过Meanshift聚类来聚合到一起，最后形成运动目标轮廓。 新目标检测方法其实写到这里想了想到底能不能叫目标检测，博主认为图像的前背景分离也是目标检测的一种（博主才疏学浅，求赐教）。 1、像素点操作 对每个像素点进行操作，判别为前景或者背景两类。如下面的图片所示： 2、低秩矩阵应用 背景建模是从拍摄的视频中分离出背景和前景。下面的例子就是将背景与前景分离开。使用的方法是RPCA的方法。 其网址以及效果如下： http://perception.csl.illinois.edu/matrix-rank/introduction.html 3、深度学习 FCN + DenseCRF精确分割+语义标签。图像中的前景目标检测分割做的很好，下面还能做出语义检测，判断出图中的东西属于什么。ICCV 2015 paper ：Conditional Random Fields as Recurrent Neural Networks 测试网址以及测试图像如下： http://www.robots.ox.ac.uk/~szheng/crfasrnndemo]]></content>
      <categories>
        <category>Computer Vision</category>
      </categories>
      <tags>
        <tag>Computer Vision</tag>
        <tag>Object</tag>
        <tag>Detection</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu16.04安装L2TP Client]]></title>
    <url>%2Farticle%2FUnderUbuntuInstallL2TP.html</url>
    <content type="text"><![CDATA[添加源1sudo add-apt-repository ppa:nm-l2tp/network-manager-l2tp Update1sudo apt update 安装network-manager-l2tp1sudo apt install network-manager-l2tp 安装UI1sudo apt install network-manager-l2tp-gnome]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>VPN</tag>
        <tag>L2TP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LabelImg使用教程]]></title>
    <url>%2Farticle%2FlabelImgUsing.html</url>
    <content type="text"><![CDATA[Steps 首先新建一个存放标定结果xml的目标文件夹（命名不要有中文）。 点击 file，选择 Change default saved annotation folder，选择存放xml文件的目标文件夹。 点击 Open Dir，打开图像数据目录（不要有中文） 点击 Create RectBox，光标置于目标左上角，按住左键向右下角拖动。方框绘制完成后，双击选择弹窗中相应的类别名称。 标注完成后，光标放至方框内，该方框可移动位置以及右键删除. 标注完成后，点击左边栏的 save进行保存（务必保存） Hotkeys Ctrl + u Load all of the images from a directory Ctrl + r Change the default annotation target dir Ctrl + s Save Ctrl + d Copy the current label and rect box Space Flag the current image as verified w Create a rect box d Next image a Previous image del Delete the selected rect box Ctrl++ Zoom in Ctrl— Zoom out ↑→↓← Keyboard arrows to move selected rect box]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Deep Learning</tag>
        <tag>深度学习</tag>
        <tag>LabelImg</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LabelImg介绍与安装教程]]></title>
    <url>%2Farticle%2FLabelImgInstall.html</url>
    <content type="text"><![CDATA[介绍对图片标注进而创建自己的数据集，以便在Deep neural networks中进行训练。 本文推荐一款十分好用的图片标注工具LabelImg，重点介绍其安装以及使用的过程。 在此感谢原作者在Github所做的贡献，博主发现软件一直在更新，各位小伙伴可以关注其最新版本。这款工具是全图形界面，用Python和Qt写的，最厉害的是其标注信息可以直接转化成为XML文件，与PASCAL VOC以及ImageNet用的XML是一样的。 PS.作者在5月更新了代码，现在最新的版本号是1.3.0，博主亲测，源代码在Windows 10和Ubuntu 16.04上运行正常。 Ubuntu 源码安装由于Ubuntu系统自带python，这款软件在Ubuntu环境下的安装是最方便的。软件要求python版本在2.6以上，同时需要PyQt和lxml的支持。 12345678910sudo apt-get install pyqt4-dev-tools # 安装PyQt4sudo pip install lxml # 安装lxml，如果报错，可以试试下面语句sudo apt-get install python-lxmlgit clone https://github.com/tzutalin/labelImg.gitcd labelImgmake all./labelImg.py # 或者 python labelImg.py# 作者新加的命令模式（应该只适用于最新github代码）./labelImg.py [IMAGE_PATH] [PRE-DEFINED CLASS FILE] Ubuntu pip安装作者最近（2017.05）增添的一种安装方式，使用Python的pip工具安装，感觉更方便了。 123pip install labelImglabelImglabelImg [IMAGE_PATH] [PRE-DEFINED CLASS FILE] Windows平台安装 安装Anaconda Anaconda是一款十分好用的python集成安装环境，主要是方便扩展包管理。 具体介绍可参考这篇博客 。首先从官网下载最新的版本，这里我下载的是64位的python2.7版本。然后双击安装，一般点选“for all person”，然后安装到系统默认位置即可。安装成功后建议在环境变量path里面增加一条“C:\Program Files\Anaconda2” 安装PyQt 打开命令行窗口，输入conda list ，会列出所有预装的python扩展包，可以看到里面已经有了lxml，但是缺少PyQt。命令行输入conda install pyqt=4 ,等待一会即可完成PyQt4的安装。 下载源码并运行 在原作者的github下载源码压缩包，解压可得到名为labelImg-master的文件夹，进入该文件夹，在空白处使用“Shift+鼠标右键”，进入当前目录的命令行窗口，依次输入下面语句即可打开软件。 123pyrcc4 -o resources.py resources.qrcpython labelImg.pypython labelImg.py [IMAGE_PATH] [PRE-DEFINED CLASS FILE]]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Deep Learning</tag>
        <tag>深度学习</tag>
        <tag>LabelImg</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机视觉学习笔记]]></title>
    <url>%2Farticle%2FComputerVisionStudyNotes.html</url>
    <content type="text"><![CDATA[概念计算机视觉（Computer Vision）就是指用摄影机和计算机代替人眼对目标进行识别、跟踪和测量等机器视觉，并进一步做图像处理，用计算机处理成更适合人眼观察或进行仪器检测的图像。 图1 计算机视觉介绍 图2 计算机视觉、机器视觉和图像处理之间的关系和区别]]></content>
      <categories>
        <category>Computer Vision</category>
      </categories>
      <tags>
        <tag>计算机视觉</tag>
        <tag>Computer Vision</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大疆Maniflod妙算 -个人理解]]></title>
    <url>%2Farticle%2FDJIManiflodUsing.html</url>
    <content type="text"><![CDATA[妙算的实质官方宣称：大疆直连计算平台个人理解：英伟达TK1+自定义接口+大疆的SDK 注意虽然长得像个微型电脑，但妙算内部的CPU、GPU是嵌入式（NVIDIA Jetson TK1）的，所以默认搭载的也是嵌入式Ubuntu系统（大疆可能在这个基础上做了一些优化）一般我们装Ubuntu后会因为apt-get的下载源网速比较慢而换成国内的源（阿里之类的），千万要记得别选成i386的安装源（那是给Intel芯片的机子用的） 安装后的系统默认是全英文的 OpenCV妙算支持两种（还是三种？我记不清了）OpenCV 桌面系统的OpenCV（2，3应该都可以） 针对Jetson TK1专门优化过的OpenCV（版本是2.x.x，不支持3以上的版本，大疆官方手册里有讲具体的安装办法） 安装教程具体过程请看官方教程 重装系统（制作和恢复镜像）需要连接到装有Linux系统的电脑，刷入系统具体过程请看官方教程 最后如果你不是做嵌入式开发的，接触妙算后会不熟悉，特别是你把机子搞到要重装时会很无语，不过也放宽心态，哈哈哈… 详细过程后续文章中继续更新……]]></content>
      <categories>
        <category>UAV</category>
      </categories>
      <tags>
        <tag>UAV</tag>
        <tag>无人机</tag>
        <tag>大疆</tag>
        <tag>妙算</tag>
        <tag>Maniflod</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[大疆Maniflod妙算详解]]></title>
    <url>%2Farticle%2FDJIManiflodIntroduce.html</url>
    <content type="text"><![CDATA[基本配置Manifold 妙算采用NVIDIA Tegra K1处理器，它由NVIDIA 4-加-1 四核ARM - Cortex A15 CPU和包含192个NVIDIA CUDA 核心的 NVIDIA Kepler GPU组成，最高主频达2.2GHz。GPU核心不仅能实现强大的图像处理能力，还能高效地处理并行任务，浮点运算能力达326GFLOPS。 图像处理功能Manifold 妙算 拥有PC独立显卡级别的绘图能力，支持DirectX 11、OpenGL 4.4，可让机器人实时进行复杂的图像处理。Manifold还支持NVIDIA CUDA，用于开发最前沿的 GPU 加速应用，可将程序性能提升数倍。Manifold能广泛应用于计算机视觉、深度学习等人工智能领域，让你的设备具备环境感知、物体辨识和实时反应能力。 开发环境Manifold 妙算搭载了Ubuntu操作系统，可便捷安装运行Linux软件，支持CUDA、OpenCV及ROS等。全面支持DJI Onboard SDK，可轻松获取飞行数据，并进行控制和数据分析。 接口Manifold 妙算具备USB、Ethernet、Mini-PCIe、HDMI、UART、SPI和I2C等一系列接口，可连接传感器、显示屏等多种扩展设备。Manifold还能通过自定义接口与经纬M100 、M600连接，实时接收并处理所搭载云台相机的图像信息。 功耗其峰值功耗约15W，仅为普通笔记本电脑的四分之一，配备的Tegra K1 CPU共有4个A15核心，可从容应对复杂的计算任务， 1个附属核心负责简单任务的处理。其中，4个A15核心中的每一个核心均可根据工作负荷的繁重程度，独立而自动地启用和关闭，从而降低整体功耗。]]></content>
      <categories>
        <category>UAV</category>
      </categories>
      <tags>
        <tag>UAV</tag>
        <tag>无人机</tag>
        <tag>大疆</tag>
        <tag>妙算</tag>
        <tag>Maniflod</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[深度学习资料推荐]]></title>
    <url>%2Farticle%2FDeepLearningMaterials.html</url>
    <content type="text"><![CDATA[深度学习圣经级教科书 摆书房，信仰用 公开课Machine learning： Andrew Ng (吴恩达): 斯坦福大学CS229 《 Mchine learning》推荐 Andrew Ng (吴恩达): Coursera2012推荐 Hung-yi Lee: 台湾大学 Machine Learning (2017,Fall)推荐 Geoffrey Hinton: Coursera 《Neural Networks For Machine Learning》 Yaser Abu-Mostafa: 加州理工学院 《Learnning from data》 Deep learning： Andrew Ng (吴恩达): DeeplearniNg.AI Deep Learning推荐 Fei-Fei Li: 斯坦福大学CS231n 《Convolutional Neural Networks for Visual Recognition》推荐 Chris Manning: 斯坦福大学CS224n 《Natural Language Processing with Deep Learning》 Google: Udacity 《Deep Learning by Google》 教材 Yoshua Bengio 《Deep Learning》 Toby Segaran 《Programming Collective Intelligence》 Peter Harrington 《Machine Learning in action》 深度学习框架 Tensorflow 初学者篇：https://www.tensorflow.org/get_started/mnist/beginners 进阶篇：https://www.tensorflow.org/get_started/mnist/pros Caffe 参考：http://www.cnblogs.com/denny402/tag/caffe/default.html?page=2 Keras 参考：http://keras-cn.readthedocs.io/en/latest/getting_started/sequential_model/]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Deep Learning</tag>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Faster-RCNN的搭建和测试]]></title>
    <url>%2Farticle%2FFasterRCNNBulidAndTest.html</url>
    <content type="text"><![CDATA[下载Faster-RCNN12cd ~git clone --recursive https://github.com/rbgirshick/py-faster-rcnn.git 安装Python依赖包1234sudo apt-get install python-pipsudo pip install cythonsudo apt-get install python-opencvsudo pip install easydic 生成Cython模块12cd ~/py-faster-rcnn/lib/make 安装Atlas1sudo apt-get install libatlas-base-dev 生成Caffe和pycaffe12cd ~/py-faster-rcnn/caffe-fast-rcnncp Makefile.config.example Makefile.config 编辑Makefile.config，根据自己的需要修改相应模式，其中重点关注CPU_ONLY 和WITH_PYTHON_LAYER以及CUDNN等处，若是在CPU的情况下，请务必修改为CPU_ONLY ：= 1 编译环境12345678cd ~/py-faster-rcnn/caffe-fast-rcnnmkdir buildcd buildcmake ..make all -j16（"‐j16"是使用 CPU 的多核进行编译,可以极大地加速编译的速度）make installmake runtest -j16（如果出错没有关系，直接进行下一步）make pycaffe（编译pycaffe） 下载fetch_fast_rcnn_models下载网址：（链接：http://pan.baidu.com/s/1pJVburD 密码：11m0） 将下载好的faster_rcnn_models.tgz放到/py-faster-rcnn/data这个目录下，右键提取到此处，即是解压。 CPU环境下所需要的操作 1vim ~/py-faster-rcnn/lib/fast_rcnn/config.py 将 __C.USE_GPU_NMS = False 1vim ~/py-faster-rcnn/tools/test_net.py 注释掉：caffe.set_mode_gpu() ，其下方添加： caffe.set_mode_cpu() 1vim ~/py-faster-rcnn/tools/train_net.py 注释掉：caffe.set_mode_gpu() ，其下方添加： caffe.set_mode_cpu() 1vim ~/py-faster-rcnn/lib/setup.py 注释掉GPU相关代码，如下 1#CUDA = locate_cuda() 1234567891011121314151617# Extension('nms.gpu_nms',# ['nms/nms_kernel.cu', 'nms/gpu_nms.pyx'],# library_dirs=[CUDA['lib64']],# libraries=['cudart'],# language='c++',# runtime_library_dirs=[CUDA['lib64']],# # this syntax is specific to this build system# # we're only going to use certain compiler args with nvcc and not with# # gcc the implementation of this trick is in customize_compiler() below# extra_compile_args=&#123;'gcc': ["-Wno-unused-function"],# 'nvcc': ['-arch=sm_35',# '--ptxas-options=-v',# '-c',# '--compiler-options',# "'-fPIC'"]&#125;,# include_dirs = [numpy_include, CUDA['include']]# ), 1vim ~/py-faster-rcnn/lib/fast_rcnn/nms_wrapper.py 注释掉 #from nms.gpu_nms import gpu_nms 运行Demo1234cd ~/py-faster-rcnn/tools./demo.py 或python demo.py #当此处报错时请尝试python2 demo.py#CPU环境下运行话：python2 demo.py --cpu 若提示缺少某个模块(module)，网上搜索下，安装给出的教程安装相应模块，建议尽量终端中命令安装． 效果图如下(仅贴了一张图)：]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Deep Learning</tag>
        <tag>Caffe</tag>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Fast-RCNN的搭建和测试]]></title>
    <url>%2Farticle%2FFastRCNNBulidAndTest.html</url>
    <content type="text"><![CDATA[下载Fast-RCNN12cd ~git clone --recursive https://github.com/rbgirshick/fast-rcnn.git 安装Python依赖包1234sudo apt-get install python-pipsudo pip install cythonsudo apt-get install python-opencvsudo pip install easydic 生成Cython模块12cd ~/fast-rcnn/lib/make 安装Atlas1sudo apt-get install libatlas-base-dev 生成Caffe和pycaffe12cd ~/fast-rcnn/caffe-fast-rcncp Makefile.config.example Makefile.config 编辑Makefile.config，根据自己的需要修改相应模式，其中重点关注CPU_ONLY 和WITH_PYTHON_LAYER以及CUDNN等处，若是在CPU的情况下，请务必修改为CPU_ONLY ：= 1 编译环境12345678cd ~/fast-rcnn/caffe-fast-rcnnmkdir buildcd buildcmake ..make all -j16（"‐j16"是使用 CPU 的多核进行编译,可以极大地加速编译的速度）make installmake runtestmake pycaffe（编译pycaffe） 下载fetch_fast_rcnn_models下载网址：（链接：http://pan.baidu.com/s/1pJVburD 密码：11m0） 将下载好的fetch_fast_rcnn_models.tgz放到/fast-rcnn/data这个目录下，右键提取到此处，即是解压。 运行Demo1234cd ~/fast-rcnn/tools./demo.py 或python demo.py #当此处报错时请尝试python2 demo.py#CPU环境下运行话：python2 demo.py --cpu 若提示缺少某个模块(module)，网上搜索下，安装给出的教程安装相应模块，建议尽量终端中命令安装． 效果图如下(仅贴了一张图)：]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Deep Learning</tag>
        <tag>Caffe</tag>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[测试Caffe]]></title>
    <url>%2Farticle%2FTestCaffe.html</url>
    <content type="text"><![CDATA[下载Mnist123cd ~/caffesudo sh data/mnist/get_mnist.shsudo sh examples/mnist/create_mnist.sh ​ 有GPU，则不需要修改配置文件，如果没有GPU，则需要修改配置文件 lenet_solver.prototxt 1vim examples/mnist/lenet_solver.prototxt 将最后一行的solver_mode:GPU 改为 solver_mode:CPU 运行1sudo sh examples/mnist/train_lenet.sh 注意，运行caffe程序时，必须在caffe的根目录下，不然会出错 ​​]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Deep Learning</tag>
        <tag>Caffe</tag>
        <tag>深度学习</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[安装Caffe]]></title>
    <url>%2Farticle%2FInstallCaffe.html</url>
    <content type="text"><![CDATA[下载Caffe直接使用Git下载caffe，如果没有Git，请先安装Git：1sudo apt-get install git ​ 安装Caffe： 1git clone git://github.com/BVLC/caffe.git 安装依赖包1234567891011sudo apt-get install libatlas-base-devsudo apt-get install libprotobuf-devsudo apt-get install libleveldb-devsudo apt-get install libsnappy-devsudo apt-get install libopencv-devsudo apt-get install libboost-all-devsudo apt-get install libhdf5-serial-devsudo apt-get install libgflags-devsudo apt-get install libgoogle-glog-devsudo apt-get install liblmdb-devsudo apt-get install protobuf-compiler 安装OpenCV（可选）123456cd caffesudo git clone https://github.com/jayrambhia/Install-OpenCVcd Install-OpenCV/Ubuntusudo sh dependencies.shcd 2.4sudo sh opencv2_4_10.sh 修改Caffe配置文件12cd ~/caffesudo cp Makefile.config.example Makefile.config 修改配置文件，本人使用vim，若果没有，请先安装： 1sudo apt-get install vim 打开文件： 1vim Makefile.config 修改如下： 12345678910111213141516171819202122232425262728//如果你不使用GPU的话，就将# CPU_ONLY := 1修改成：CPU_ONLY := 1//若使用cudnn，则将# USE_CUDNN := 1修改成：USE_CUDNN := 1//若使用的opencv版本是3的，则将# OPENCV_VERSION := 3修改为：OPENCV_VERSION := 3//若要使用python来编写layer，则需要将# WITH_PYTHON_LAYER := 1修改为WITH_PYTHON_LAYER := 1//重要的一项！！！将# Whatever else you find you need goes here.下面的INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/includeLIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib修改为：INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include /usr/include/hdf5/serialLIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib /usr/lib/x86_64-linux-gnu /usr/lib/x86_64-linux-gnu/hdf5/serial//这是因为ubuntu16.04的文件包含位置发生了变化，尤其是需要用到的hdf5的位置，所以需要更改这一路径 编译123make all -j16（"‐j16"是使用 CPU 的多核进行编译,可以极大地加速编译的速度）make test -j16make runtest -j16]]></content>
      <categories>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Deep Learning</tag>
        <tag>Caffe</tag>
        <tag>深度学习</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux学习笔记]]></title>
    <url>%2Farticle%2FLinuxStudyNote.html</url>
    <content type="text"><![CDATA[绝对路径： cd /home/python相对路径： cd Desktop . : 表示当前目录.. : 表示当前目录的上一层目录../.. : 表示当前目录的上上层目录没有…或以上 ls : 123456789101112ls #查看当前目录下的文件或文件夹ls /bin #查看根目录下bin文件夹下的东西ls Document #查看当前路径下Document文件夹中的东西ls -a #显示隐藏文件ls -l #以列详细表格式显示文件ls -l -h #以列详细表格式显示文件，文件大小以合适的单位进行显示 (ls -lh 或 ls -hl 效果同上）ls *.txt #显示以txt为后缀的文件ls *.t?t #显示txt或tnt等为后缀的文件ls *.t[xn]t #只显示txt或tnt为后缀的文件ls *.t[a-f]t #只显示tat -&gt; tft为后缀的文件，必须是连续的ls \*a #显示 *a 文件ls -alh | more #显示，并分页显示，利用了管道“|”命令进行暂时存储 cd : 1234cd Desktop #进入Desktop这个文件夹cd .. #跳转到当前目录的上一层目录cd - #跳转到上一次所在的路径(类似遥控器中的回看)cd ~ #跳转到当前用户的家目录 clear : 清屏 pwd : 显示路径 tab : 用来自动补全 touch : 创建一个文件，Linux中没有后缀的说法，可以起各种名字1touch a/b/xxx.txt #在a中的b文件夹中创建 xxx.txt文件 > #重定向 ，例如 ls &gt; test.txt 或 ls -alh &gt; test.txt >&gt; #重定向，不过不代替原数据，添加数据 more ：分屏显示cat ：全部显示 12cat helloworld.txt &gt; xyz.txt #起到到复制的功能cat a.txt b.txt &gt; xxx.txt #将a.txt和b.txt合并到xxx.txt，但是要注意前后顺序 mkdir : 创建文件夹 12mkdir a #在当前文件夹创建mkdir a/b/c -p #在a文件夹中创建b,并在b文件夹中创建c tree : 以目录树的方式显示 rmdir : 删除空文件夹 1例: rmdir test.txt rm ： 删除即无 1rm hello_python -r #删除文件夹 ln : 创建；链接 123ln -s 源文件 链接文件 #表示创建软链接ln 源文件 链接文件 #表示创建硬链接注：硬链接把源文件删除，链接文件仍然可以打开；软连接则不行 grep : 查找文件内容 1234其中 -n 代表行号； -i 忽略大小写；-v 代表取反，除了x，留下剩下的grep -n 'a' greptest.txt #查找任意位置的agrep -n '^a' greptest.txt #查找a开头grep -n 'a$' greptest.txt #查找a结尾 ls —help : 帮助man ls : 帮助 history : 历史命令 find : 查找文件 123find ./ -name '*.sh' #即在当前目录查找find / -name '*xyz*' #根目录下查找fine /tep -size -2M #在该目录下查找小于2M的文件, +2M :大于2M的文件 cp : 拷贝 12345-v 显示进度；-r 拷贝文件夹;-i 交互，让用户确认；-f 强制，禁止交互；cp 原文件名 复制的文件名cp *0 ./acp b a/ -r #即将文件夹b拷贝到文件夹a中cp b/* a/ -r #即将文件夹b中的内容拷贝到文件夹a中 mv : 移动、剪切 tar : 打包 1234tar -cvf test.tar * #即把当前所有文件打包tar -xvf test.tar #即把tar文件还原tar -zcvf test.tar.gz * #即把当前文件打包并压缩tar -zxvf test.tar.gz gzip : gzip压缩 123gzip test.tar #即压缩文件gzip -d test.tar #即解压缩流程：打包-&gt;压缩—&gt; -&gt;解压-&gt;解包 bz2 : bizp2压缩 12tar -jcvf test.tar.bz2 test.txt #即把当前文件打包并压缩tar -jcvf test.tar.bz2 -C test/ #即解压到test文件夹下 zip : zip压缩 123zip myzip * #即把当前文件夹中的文件压缩为myzipuzip -d ./ myzip.zip #即解压到当前文件夹中uzip -d ./aa myzip.zip #即创建aa,并解压到aa文件夹中 which : 显示命令的位置 1which ls #显示ls命令的位置 ifconfig : 查看ip地址，Windows中使用ipconfig 123ifconfig ens33 down #把网卡关闭ifconfig ens33 up #把网卡打开ifconfig ens33 178.12.12.23 #设置ip地址 ping : 测试网络链接是否正常 ssh : 远程登录 1ssh 用户@ip地址 who : 当前有几个用户正在使用 12who -q #哪些用户登录了电脑whoami #查看当前用户名 exit : 退出 useradd : 添加用户账号 12-m ：自动创建家目录文件夹； -d :指定家目录路径 ；-g : 指定用户组sudo useradd yonghuming -m -d /home/hahaha #创建用户 yonghuming control + a : 快速跳到行头control + e : 快速跳到行尾 passwd : 设置密码 1sudo yonghuming #设置yonghuming的密码 su : 切换用户 12su yonghuming #切换到用户 yonghumingsu - yonghuming #切换到用户 yonghuming ，并且跳转到yonghuming其家目录 userdel : 删除用户 12userdel abc(用户) #删除用户，不删除其主目录userdel -r abc(用户) #删除用户，并删除其主目录 sudo : 获取管理员权限 1sudo -s #把当前用户切换到root用户 group ：用户组 12345cat etc/group/ #查看用户组gropumod + 2次tab键groupadd xyz(用户) #创建用户组groupdel xyz(用户) #删除用户组groups xyz(用户) #查看用户所在的用户组 usermod : 修改用户所在的组 1234格式：usermod -g 用户组 用户名 #用户名默认的主组usermod -a -G XXX xyz(用户) #把用户xyz添加到其他组XXX，副组usermod -a -G adm xyz(用户)usermod -a -G sudo xyz(用户) #给用户xyz sudo的权限 chmod : 修改权限 12345678格式：chmod u/g/o/a +/-/= rwx test.txt其中 u = user,g = group, o = other, a = all; + 增加权限，- 减少权限，= 赋予权限chmod u=rwx,o=rwx test.py #赋予user、others可读可写可执行权限chomod a= test.py #清空权限数字对应法：r--&gt;4, w--&gt;2, x--&gt;1;chmod 761 test.py chmod 777 123(文件夹) #只会修改文件夹123的权限为777chmod 777 123(文件夹) -R #修改文件夹123及其内部所有文件的权限为777 chown : 修改所有者 chgrp : 修改组别 cal : 系统日历 ps : 查看进程设置 12psps -aux : top : 动态显示进程所在的内存的状态 kill ： 杀进程 1kill (PID) reboot : 重启 shutdown : 重启 1shutdown -h now #立即关机 df : 检查磁盘空间 du : 检测目录所占磁盘空间vi 3种模式： vim xxx.py +22 ：打开并跳转到第22行； 1、命令模式；i、o、a-&gt;插入模式；: -&gt;末行模式； i光标左侧输入，a光标右侧输入，o光标下侧输入；I最左侧输入，A最右侧输入，O上侧输入； hjkl : 控制左下上右；M : 中间位置；L : 屏幕最后一行； G : 跳到最后一行；15 G ：跳转到第15行，1 G : 跳到第一行；gg : 跳转到第一行； w : 向右跳一个Word；b : 向左跳一个Word； } ： 向下跳一段；{ ：向上调一段； ctr + d ：向下翻半屏；ctr + u : 向上翻半屏； ctr + f : 向下翻一屏；ctr + b : 向上翻一屏； 8yy : 表示从当前光标所在的行开始复制8行； p 粘贴； 2dd : 表示从当前光标所在的行开始剪切2行； D ：删除本行光标后所有内容；d0 : 删除本行光标前所有内容； dw : 删除光标开始位置的Word； x : 删除光标后面；X ： 删除光标前面； u 撤销；control + r : 反撤销； &gt;&gt; 文本行右移；&lt;&lt; 文本行左移； . 表示重复上一次操作的命令； v ：可视，选中一片区域； r : 替换，按 r 后，然后替换； / : 按 / 后，输入要搜索的，按 n 进行下一个查找 2、编辑模式；esc-&gt;命令模式; 3、末行模式；wq 保存退出；q! 即为强制退出； x 保存退出；shift + 2个z 保存退出 X 进行加密； 全部替换： :%s/被替换内容/替换成的内容/g 部分替换： :1,10s/被替换内容/替换成的内容/g 在末行模式下，不退出而进行其他操作： :!ls 回车 apt-get install packge : 安装包apt-get update : 刷新源]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu VIM+Terminal 配色方案]]></title>
    <url>%2Farticle%2FUbuntuVIMAndTerminalHarmonizeColors.html</url>
    <content type="text"><![CDATA[修改终端的配色：Solarized现在基本用 ubuntu 做开发，直接在终端(gnome-terminal)里面 vim，但配色效果不甚满意，因为 gvim 的配色是 Solarized，google告诉我 Gnome-Terminal 也可以这样配。可以先围观下效果图： 安装 git： 1sudo apt-get install git-core 下载Solarized Theme 1git clone git://github.com/seebi/dircolors-solarized.git dircolor-solarized 配色之一： dark256 12cp ~/dircolors-solarized/dircolors.256dark ~/.dircolorseval 'dircolors .dircolors' 设置 Terminal 支持 256 色 1vim .bashrc 添加： 1export TERM=xterm-256color 最后： 1source .bashrc 下载 Solarized 的 Gnome-Terminal 配色 1git clone git://github.com/Anthony25/gnome-terminal-colors-solarized.git 进入目录，配置运行配置脚本： 12cd gnome-terminal-colors-solarizedsudo sh set_dark.sh 或者：sudo sh set_light.sh 修改VIM配色只要把 solarized.vim 复制到 ~/.vim/colors/ 目录下就可以了 下载 Solarized 的 VIM 配色 1234git clone git://github.com/altercation/vim-colors-solarized.gitcd vim-colors-solarized/colorsmv solarized.vim ~/.vim/colors/#注：没有 .vim/ 或者 .vim/colors/ 使用 mkdir 在目录 ～/ 下创建 创建（修改）VIM配色文件 .vimrc 1vim .vimrc 添加： 123syntax enableset background=darkcolorscheme solarized]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>配色</tag>
        <tag>VIM</tag>
        <tag>Terminal</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[WIN10下安装Ubuntu 16.04（双硬盘：SDD+HDD）]]></title>
    <url>%2Farticle%2FUnderWIN10InstallUbuntuSDDAndHDD.html</url>
    <content type="text"><![CDATA[安装双系统时踩了不少坑，网上能查到的攻略和安装教程基本都看的差不多了，有些教程版本太老或解释得不很明确，特此记录。 数据备份 重要的事情说三遍，数据备份，数据备份，数据备份，数据丢失，本人概不负责。 磁盘分区（重要） 在磁盘A中（就是第一个系统的启动分区所在的磁盘），单独给出500M用于/boot分区（安装的时候把这500M free space作为/boot)，其他的/home 和/ 什么的装到磁盘B或者磁盘A上都可以（/home 和/可任意选择案安装位置）； 在磁盘B中，根据自己的需求进行分区； 安装推荐教程：Windows10+Ubuntu双系统安装进行安装 注意： 在选择分区类型时，可能会出现“安装系统时空闲分区不可用”状况，为了解决问题，所有添加的新分区类型一律选择“逻辑分区”； 选择/boot对应的盘符作为“安装启动引导器的设备”，务必保证一致；在安装过程中，为/boot分区时，一定注意添加到磁盘A中！！！]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>双系统</tag>
        <tag>双硬盘</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Sublime Text Setting]]></title>
    <url>%2Farticle%2FSublimeTextSetting.html</url>
    <content type="text"><![CDATA[Fonts：Source Code Pro https://github.com/adobe/source-code-pro https://www.jianshu.com/p/1d5e1aaeb3f6 Color scheme：Solarized https://github.com/braver/Solarized The easiest way to install is using Sublime Package Control, where Solarized is listed as Solarized Color Scheme. Open Command Palette using menu item Tools -&gt; Command Palette... (⇧⌘P on Mac) Choose Package Control: Install Package Find Solarized Color Scheme and hit Enter How to ActivateActivate the UI theme and color scheme by modifying your user preferences file, which you can find using the menu item Sublime Text -&gt; Preferences -&gt; Settings - User (⌘, on Mac). Indentation123456// The number of spaces a tab is considered equal to "tab_size": 4, // Set to true to insert spaces when tab is pressed "translate_tabs_to_spaces": true, //Set automatically when saving "expand_tabs_on_save": true Mine123456789101112131415&#123; "color_scheme": "Packages/Solarized Color Scheme/Solarized (light).tmTheme", "font_face": "Source Code Pro", "font_size": 11, "ignored_packages": [ "Vintage" ], "theme": "Default.sublime-theme", "tab_size": 4, "translate_tabs_to_spaces": true, "expand_tabs_on_save": true&#125;]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Sublime Text</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Sublime Text快捷键]]></title>
    <url>%2Farticle%2FSunlimeTestHotKey.html</url>
    <content type="text"><![CDATA[常用Tab 自动补全 Ctrl + Z 撤销 Ctrl + Y 前进 Ｃtrl+[对齐 Ｃtrl+]对齐返回 Ctrl+/ 注释单行 Ctrl+Shift+/ 注释多行。 2空格转4空格的操作：View-&gt;Indentation-&gt;Convert Indentation to Tabs-&gt;Tab width 4-&gt;Convert Indentation to Spaces SublimeText自带格式化: Edit -&gt; Line -&gt; Reindent 选择类Ctrl+D 选中光标所占的文本，继续操作则会选中下一个相同的文本。 Alt+F3 选中文本按下快捷键，即可一次性选择全部的相同文本进行同时编辑。举个栗子：快速选中并更改所有相同的变量名、函数名等。 Ctrl+L 选中整行，继续操作则继续选择下一行，效果和 Shift+↓ 效果一样。 Ctrl+Shift+L 先选中多行，再按下快捷键，会在每行行尾插入光标，即可同时编辑这些行。 Ctrl+Shift+M 选择括号内的内容（继续选择父括号）。举个栗子：快速选中删除函数中的代码，重写函数体代码或重写括号内里的内容。 Ctrl+M 光标移动至括号内结束或开始的位置。 Ctrl+Enter 在下一行插入新行。举个栗子：即使光标不在行尾，也能快速向下插入一行。 Ctrl+Shift+Enter 在上一行插入新行。举个栗子：即使光标不在行首，也能快速向上插入一行。 Ctrl+Shift+[ 选中代码，按下快捷键，折叠代码。 Ctrl+Shift+] 选中代码，按下快捷键，展开代码。 Ctrl+K+0 展开所有折叠代码。 Ctrl+← 向左单位性地移动光标，快速移动光标。 Ctrl+→ 向右单位性地移动光标，快速移动光标。 shift+↑ 向上选中多行。 shift+↓ 向下选中多行。 Shift+← 向左选中文本。 Shift+→ 向右选中文本。 Ctrl+Shift+← 向左单位性地选中文本。 Ctrl+Shift+→ 向右单位性地选中文本。 Ctrl+Shift+↑ 将光标所在行和上一行代码互换（将光标所在行插入到上一行之前）。 Ctrl+Shift+↓ 将光标所在行和下一行代码互换（将光标所在行插入到下一行之后）。 Ctrl+Alt+↑ 向上添加多行光标，可同时编辑多行。 Ctrl+Alt+↓ 向下添加多行光标，可同时编辑多行。 编辑类Ctrl+J 合并选中的多行代码为一行。举个栗子：将多行格式的CSS属性合并为一行。 Ctrl+Shift+D 复制光标所在整行，插入到下一行。 Tab 向右缩进。 Shift+Tab 向左缩进。 Ctrl+K+K 从光标处开始删除代码至行尾。 Ctrl+Shift+K 删除整行。 Ctrl+/ 注释单行。 Ctrl+Shift+/ 注释多行。 Ctrl+K+U 转换大写。 Ctrl+K+L 转换小写。 Ctrl+Z 撤销。 Ctrl+Y 恢复撤销。 Ctrl+U 软撤销，感觉和 Gtrl+Z 一样。 Ctrl+F2 设置书签 Ctrl+T 左右字母互换。 F6 单词检测拼写 搜索类Ctrl+F 打开底部搜索框，查找关键字。 Ctrl+shift+F 在文件夹内查找，与普通编辑器不同的地方是sublime允许添加多个文件夹进行查找，略高端，未研究。 Ctrl+P 打开搜索框。举个栗子：1、输入当前项目中的文件名，快速搜索文件，2、输入@和关键字，查找文件中函数名，3、输入：和数字，跳转到文件中该行代码，4、输入#和关键字，查找变量名。 Ctrl+G 打开搜索框，自动带：，输入数字跳转到该行代码。举个栗子：在页面代码比较长的文件中快速定位。 Ctrl+R 打开搜索框，自动带@，输入关键字，查找文件中的函数名。举个栗子：在函数较多的页面快速查找某个函数。 Ctrl+： 打开搜索框，自动带#，输入关键字，查找文件中的变量名、属性名等。 Ctrl+Shift+P 打开命令框。场景栗子：打开命名框，输入关键字，调用sublime text或插件的功能，例如使用package安装插件。 Esc 退出光标多行选择，退出搜索框，命令框等。 显示类Ctrl+Tab 按文件浏览过的顺序，切换当前窗口的标签页。 Ctrl+PageDown 向左切换当前窗口的标签页。 Ctrl+PageUp 向右切换当前窗口的标签页。 Alt+Shift+1 窗口分屏，恢复默认1屏（非小键盘的数字） Alt+Shift+2 左右分屏-2列 Alt+Shift+3 左右分屏-3列 Alt+Shift+4 左右分屏-4列 Alt+Shift+5 等分4屏 Alt+Shift+8 垂直分屏-2屏 Alt+Shift+9 垂直分屏-3屏 Ctrl+K+B 开启/关闭侧边栏。 F11 全屏模式 Shift+F11 免打扰模式]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Sublime Text</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Debug of " /usr/bin/env, 'python\r', No such file or directory "]]></title>
    <url>%2Farticle%2FPythonBugs01.html</url>
    <content type="text"><![CDATA[在Win下使用Sublime Text编写的Python 转移到Linux下运行报错： 1/usr/bin/env: 'python\r': No such file or directory 原因是：linux下的文本文件以ascii码为10的字符\n表示换行，而windows下则使用连续的13和10两个字符\r\n表示换行。 注：在python和c语言里使用\r代表ascii符为13的字符，叫做回车符，而\n代表ascii码为10的字符，叫做换行符。 在Win下编写的脚本中#!/usr/bin/env python在Linux下会被认为含有CR（carriage return ）字符!/usr/bin/env python\r 最简洁解决方法：使用 vim 打开脚本，命令模式下输入： :set ff=unix 回车 :wq 即可解决问题！ PS：如果之前没有安装过vim的话，使用命令： 1sudo apt-get install vim]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python--目录间.py文件调用]]></title>
    <url>%2Farticle%2FPythonNotes05.html</url>
    <content type="text"><![CDATA[这里对Python各种目录之间的.py文件调用做一个归纳。 123456789.└── folder ├── data │ └── data.txt | └── abc.py └── test | └── a.py | └── b.py └── hello.py 123# a.pydef show(): print("this is a.py") 12345678910# b.pydef add(x,y): print("sum = "%(x+y)) class B: def __init__(self, xx, yy): self.x = xx self.y = yy def plus(self): print("sum = "%(self.x + self.y)) 123# hello.pydef showHello(): print("this is hello.py") 主目录调用子目录.py文件譬如：hello.py调用b.py，需要test目录下创建__init__.py文件（该文件可以什么都不写） 1234567# 方式一：import test.btest.b.add(2,3)# 方式二：from test.b import addadd(2,3) 同目录调用.py文件譬如： a.py调用b.py 调用函数： 1234567# 方式一：import bb.add(2,3)# 方式二：from b import addadd(2,3) 调用类： 123456789# 方式一：import bxyz = b.B(2,3)xyz.plus()# 方式二：from b import B; xyz = B(2,3)xyz.plus() 跨目录读取.py文件abc.py调用hello.py： 1234567891011# 方式一：import syssys.path.append("..")import hellohello.showHello()# 方式二：import syssys.path.append("..")from hello import showHelloshowHello() abc.py调用a.py： 1234567891011# 方式一：import syssys.path.append("../test")import aa.show()# 方式二：import syssys.path.append("../test")from a import showshow()]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python--获取当前或上级目录路径]]></title>
    <url>%2Farticle%2FPythonNotes06.html</url>
    <content type="text"><![CDATA[Python脚本中常常需要目录间文件的互相调用，这里分别对获取当前目录路径和获取上级目录路径常用方法进行总结。 获取当前目录路径123456789# 方式一import osprint(os.getcwd())# 方式二import sysprint(sys.path[0])# 方式三import osprint(os.path.abspath(os.path.dirname(__file__))) 获取上级目录路径123456789101112方式一：(推荐)import osprint(os.path.abspath(os.path.join(os.path.dirname(__file__), os.pardir)))方式二：（推荐）import sys, ospwd = sys.path[0] # 获取当前执行脚本的位置print(os.path.abspath(os.path.join(pwd, os.pardir)))方式三、四、五：import osprint(os.path.abspath(os.path.dirname(os.getcwd())))print(os.path.abspath(os.path.join(os.getcwd(), "..")))print(os.path.abspath(os.path.dirname(os.path.abspath(os.path.dirname(__file__)))) #不推荐，太丑 获取上上级目录路径123456方式一：(推荐)import osprint(os.path.abspath(os.path.join(os.getcwd(), "../..")))方式二：（推荐）import osprint(os.path.abspath(os.path.join(os.getcwd(), '..', '..'))) 获取上上上级目录路径123方式一：(推荐)import osprint(os.path.abspath(os.path.join(os.getcwd(), '..', '..', '..'))) PS 解释： 12345__file__：当前文件路径os.path.dirname(file): 某个文件所在的目录路径os.path.join(a, b, c,....): 路径构造 a/b/cos.path.abspath(path): 将path从相对路径转成绝对路径os.pardir: Linux下相当于"../"]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[无人机开发资料汇总]]></title>
    <url>%2Farticle%2FUAVDevelopMaterials.html</url>
    <content type="text"><![CDATA[国内外知名论坛 无人机开源基金会(Dronecode) https://www.dronecode.org APM/PIX研发没有不知道这个的PX4官网 https://pixhawk.org/choice APM官方网站(美国3DR公司) http://ardupilot.com/ 国外DIY无人机专业论坛(DIY DRONES) http://diydrones.com/ 开源Linux自动驾驶仪(Erle-BRAIN)官网 http://erlerobotics.com/blog/home-creative/ 爱数码(LoveDigt)社区 专业数码技术交流社区 http://www.lovedigit.com APM/PIX相关调试软件： MISSION PLANNER 最新地面站下载地址 http://firmware.ap.ardupilot.org/Tools/MissionPlanner/ MISSION PLANNER 历史版本百度网盘下载地址 http://pan.baidu.com/s/1ntNUIox#path=%252FMission%2520Planner-APM%25E4%25B8%25AD%25E6%2596%2587%25E7%25BD%2591 QGROUNDCONTROL(QT版地面站下载地址，支持linux,Windows, Mac OS) http://www.qgroundcontrol.org APM安卓地面站下载1地址 http://diydrones.com/profiles/blogs/droidplanner-ground-control-station-for-android-devices (这个版本比较好用，但是需要安卓手机安装谷歌server,也可以寻找国内团队的改写版) APM安卓地面站下载2地址 http://diydrones.com/group/andropilot-users-group andropilot也是APM安卓地面站，可以下载参考。 国内爱好者改编的APM安卓地面站，比较适合国内网络受限的条件：http://fir.im/fishDroneGCS 飞控开发人员相关必备网站 APM自动驾驶仪源码 https://github.com/diydrones/ardupilot MISSION PLANNER 源码下载地址 https://github.com/diydrones/MissionPlanner PXHAWK原生固件源码下载地址 https://github.com/PX4/Firmware PXHAWK ardupilot固件下载地址：https://github.com/ArduPilot/ardupilot GQC 地面站源码下载地址 ：https://github.com/mavlink/qgroundcontrol PIXHAWK原生固件中文翻译开发指导手册：https://px4.osdrone.net/ PIXHAWK ardupilot固件编译指导手册：http://ardupilot.org/dev/docs/building-px4-for-linux-with-make.html#building-px4-for-linux-with-make PIXHAWK光流资料手册：https://dev.px4.io]]></content>
      <categories>
        <category>UAV</category>
      </categories>
      <tags>
        <tag>UAV</tag>
        <tag>无人机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[儿童自我保护教育]]></title>
    <url>%2Farticle%2FChildEducation.html</url>
    <content type="text"><![CDATA[因为最近的携程幼儿园和红黄蓝幼儿园被爆虐童的事件，特整理儿童自我保护教育的资料。 持续更新中]]></content>
      <categories>
        <category>Child Education</category>
      </categories>
      <tags>
        <tag>儿童</tag>
        <tag>自我保护</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Matlab常用命令速查]]></title>
    <url>%2Farticle%2FMatlabFunctionl.html</url>
    <content type="text"><![CDATA[Matlab常用命令速查表 这里只给出了函数的名字及其功能，至于其格式及其调用方法，请参阅MATLAB的在线帮助（只需要在命令窗口输入“help fun_name”） 我觉得学习Matlab（包括任何语言）需注意的是： 必须要有毅力。贵在坚持和积累！就像学习英语那样。 要敢于开口请教别人，向你的师兄，向网络上的Matlab高手咨询，共同讨论。 勤于思考，勤于记忆，勤于动手。对许多问题的探索一定要用自己的大脑去想，直到明白了为止，和其他其他程序设计一样，需要记忆的东西还是记忆，这样可以节省时间。程序设计是实践性和操作性很强的事情，需要你自己亲自动手。 最为重要的就是会在线帮助，但是上面写的都是英语，需要一定的英语基础。实在不懂就安装一个Google翻译之类的软件。 制作本表主要是为了便于应用时查阅，限于个人水平和资料，错误之处，望批评指正，不胜感激！]]></content>
      <categories>
        <category>Matlab</category>
      </categories>
      <tags>
        <tag>Matlab</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Matlab画图函数]]></title>
    <url>%2Farticle%2FMatlabPlotFunction.html</url>
    <content type="text"><![CDATA[Matlab 在线帮助文档，]“MATLAB/Graphics”。 类别 Function 图 维度 描述 曲线 plot 2 绘制曲线，相邻点之间被插值 fplot 输入函数或函数句柄、自变量取值区间，绘制曲线 plotyy 2 双纵坐标图，两个纵坐标的数量级不同 plot3 3 绘制3D曲线 loglog 2 X,Y坐标都按对数缩放 semilogx 2 仅X坐标按对数缩放 semilogy 2 仅Y左边按对数缩放 errorbar 2 误差条形图，见wikipedia“Error bar” 条形直方面域 bar 2 条形图（垂直），分为grouped和stacked风格 bar3 3 3D条形图（垂直） barh 2 水平条形图，分为grouped和stacked风格 bar3h 3 3D水平条形图 hist 2 频数直方图 histc 输入数据和区间，返回数据落在每个区间的频数 pareto 2 帕累托图（柏拉图），见wikipedia“Pareto Chart” area 2 填充区域图，曲线和X轴之间被填充 pie 2 饼图，用于表示比例 pie3 3 3D饼图 极坐标 polar 2 极坐标图，以极坐标绘制曲线 rose 2 角直方图（频数扇形图） 离散数据 stem 2 杆图，对每个数据，从X轴伸出一条垂直线，顶端画圆圈 stem3 3 3D杆图 stairs 2 阶梯图，相邻点间不进行插值 scatter 2 散点图（气泡图），绘制一系列散点 scatter3 3 3D散点图 spy 2 稀疏模式（sparsity pattern）图，对矩阵非0的地方绘制散点 plotmatrix 2 将矩阵绘制为散点图或散点图和直方图 等高线 contour 2 等高线图，二维函数的等值线 contour3 3 3D等高线图，三维函数（空间函数）的等值线 contourf 2 填充的等高线图 contourc 等高线计算 曲面网格 surf 3 曲面图，和mesh的区别是，surf在小矩形上做颜色插值 surfl 3 在surf基础上，加入光照 surfc 3 在surf基础上，在底部绘制等高线图 surfnorm 3 在surf基础上，每个面绘制法线 surface 低层次曲面绘制函数 mesh 3 网格图，在行和列上绘制一系列曲线，构成网格 meshc 3 在mesh基础上，在底部绘制等高线图 meshz 3 在mesh基础上，在网格四周绘制“帘子” waterfall 3 瀑布图，类似于meshz函数，但在矩阵的列之间不生成线 ribbon 3 带图，绘制一定宽度的带，相当于将二维曲线沿着垂直平面方向拉开一定宽度形成三维图形 pcolor 2 伪彩图，根据矩阵的“相邻四个点”的值对应颜色插值得到小矩形颜色 peaks Example function of two variables cylinder Generate cylinder ellipsoid Generate ellipsoid sphere Generate sphere surf2patch Convert surface data to patch data 标量场体数据 slice 3 体积切片图，对体数据进行切片观察 contour-slice 3 切片等高线图，体数据在切片平面中的等值线 flow Simple function of three variables isosurface Extract isosurface data from volume data isocaps Compute isosurface end-cap geometry isocolors Calculate isosurface and patch colors isonormals Compute normals of isosurface vertices reduce-patch Reduce number of patch faces reduce-volume Reduce number of elements in volume data set shrinkfaces Reduce size of patch faces smooth3 Smooth 3-D data subvolume Extract subset of volume data set volume bounds Coordinate and color limits for volume data 向量场体向量数据 feather 2 羽状图，以X轴上的点为起点绘制一系列向量 compass 2 射线图，以原点为起点绘制一系列向量 quiver 2 矢量场图，以采样点为起点绘制一系列向量 quiver3 3 3D矢量场图 streamslice 3 绘制流场（三维向量函数）在切片平面中的流线 streamline 3 绘制流场的流线（类似于磁感线），起点由数据指定 coneplot 3 绘制三维圆锥，圆锥的起点由数据指定，方向和大小由流场指定 stream-particles 3 绘制流场marker粒子 stream-ribbon 3 绘制流场ribbon图 streamtube 3 绘制流场流管 curl Compute curl and angular velocity of vector field divergence Compute divergence of vector field interp-stream-speed Interpolate stream-line vertices from flow speed stream2 Compute 2-D streamline data stream3 Compute 3-D streamline data 多边形 fill 2 绘制填充的多边形 fill3 3 3D填充多边形 patch 2,3 绘制一个或多个填充多边形 Easy-to-use ezplot 2 Easy-to-use版绘图函数，这类函数传入要绘制的函数或函数句柄，以及自变量的定义域，调用具体函数绘图。例如ezplot的一种调用方式是：ezplot(fun,[xmin,xmax]) ezplot3 3 ezpolar 2 ezcontour 2 ezcontourf 2 ezsurf 3 ezsurfc 3 ezmesh 3 ezmeshc 3 动画 comet 2 彗星图，绘制一个类似彗星运动的动画，头部是圆圈，运动轨迹遍历数据 comet3 3 3D彗星图 image 2 将矩阵绘制成图像 movie Play recorded movie frames noanimate Change EraseMode of all objects to normal drawnow Update figure window and execute pending callbacks refreshdata Refresh data in graph when data source is specified frame2im Return image data associated with movie frame getframe Capture movie frame im2frame Convert image to movie frame]]></content>
      <categories>
        <category>Matlab</category>
      </categories>
      <tags>
        <tag>Matlab</tag>
        <tag>画图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown语法]]></title>
    <url>%2Farticle%2FMarkdownGrammar.html</url>
    <content type="text"><![CDATA[Markdown 是一种轻量级标记语言，它用简洁的语法代替排版，使我们专心于码字。它的目标是实现易读易写，成为一种适用于网络的书写语言。同时，Markdown支持嵌入html标签。 个人使用的编辑器为：Typora，轻量、跨平台、方便！ Markdown的常用语法标题Markdown 标题支持两种形式： 1、用#标记 在 标题开头 加上1~6个#，依次代表一级标题、二级标题….六级标题 123456# 一级标题## 二级标题### 三级标题##### 四级标题###### 五级标题###### 六级标题 2、用=和-标记 在 标题底下 加上任意个=代表一级标题，-代表二级标题 12345一级标题======二级标题---------- 列表Markdown 支持有序列表和无序列表。 无序列表使用-、+和*作为列表标记： 1234567891011- Red- Green- Blue* Red* Green* Blue+ Red+ Green+ Blue 效果如下： Red Green Blue 有序列表则使用数字加英文句点.来表示： 1231. Red2. Green3. Blue 效果如下： Red Green Blue 注意：Markdown使用#、+、*、. 等符号来标记， 符号后面必须跟上 至少1个 空格才有效！ 引用引用以&gt;来表示，引用中支持多级引用、标题、列表、代码块、分割线等常规语法。 常见的引用写法： 123456789101112131415161718&gt; 这是一段引用 //在`&gt;`后面有 1 个空格&gt; &gt; 这是引用的代码块形式 //在`&gt;`后面有 5 个空格&gt; &gt; 代码例子：&gt; protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); &#125;&gt; 一级引用&gt; &gt; 二级引用&gt; &gt; &gt; 三级引用&gt; &gt; 1. 这是第一行列表项&gt; 2. 这是第二行列表项 效果如下： 这是一段引用 12&gt; 这是引用的代码块形式 //在`&gt;`后面有 5 个空格&gt; &gt; 代码例子： 1234protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); setContentView(R.layout.activity_main);&#125; 一级引用 二级引用 三级引用 这是第一行列表项 这是第二行列表项 以下是分割线 强调两个*或-代表加粗，一个*或-代表斜体，~~代表删除。 12345**加粗文本** 或者 __加粗文本__*斜体文本* 或者_斜体文本_~~删除文本~~ 效果如下： 加粗文本 或者 加粗文本 斜体文本 或者 斜体文本 删除文本 图片与链接图片与链接的语法很像，区别在一个 ! 号。二者格式： 123图片：![]() ![图片文本(可忽略)](图片地址)链接：[]() [链接文本](链接地址) 插入视频注：Markdown 语法是不支持直接插入视频的普遍的做法是 插入HTML的 iframe 框架，通过网站自带的分享功能获取，如果没有可以尝试第二种方法第二是伪造播放界面，实质是插入视频图片，然后通过点击跳转到相关页面. 代码1注：多数第三方平台不支持插入&lt;iframe&gt;视频 12&lt;iframe height=498 width=510 src=&apos;http://player.youku.com/embed/XMzUxNDI3MTI3Mg==&apos; frameborder=0 &apos;allowfullscreen&apos;&gt;&lt;/iframe&gt;&lt;iframe src=&quot;http://open.iqiyi.com/developer/player_js/coopPlayerIndex.html?vid=fdf51f4dd55ed6ccf7b01e2cc8ecb40b&amp;tvId=849094800&amp;accessToken=2.f22860a2479ad60d8da7697274de9346&amp;appKey=3955c3425820435e86d0f4cdfe56f5e7&amp;appId=1368&amp;height=100%&amp;width=100%&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;true&quot;&gt;&lt;/iframe&gt; 演示 代码代码分为行内代码和代码块。 行内代码使用 代码 标识，可嵌入文字中，使用``标识 代码块使用4个空格或3个 `标识 1print "hello world" 表格表格对齐格式 居左：:---- 居中：:----:或----- 居右：----: 例子： 123456|标题|标题|标题||:---|:---:|---:||居左测试文本|居中测试文本|居右测试文本||居左测试文本1|居中测试文本2|居右测试文本3||居左测试文本11|居中测试文本22|居右测试文本33||居左测试文本111|居中测试文本222|居右测试文本333| 效果如下： 标题 标题 标题 居左测试文本 居中测试文本 居右测试文本 居左测试文本1 居中测试文本2 居右测试文本3 居左测试文本11 居中测试文本22 居右测试文本33 居左测试文本111 居中测试文本222 居右测试文本333 分隔线在一行中用三个以上的*、-、_来建立一个分隔线，行内不能有其他东西。也可以在符号间插入空格。 12345***---___* * * 效果均为一条分割线： 脚注(注解)使用[^]来定义脚注： 123这是一个脚注的例子[^1][^1]: 这里是脚注 效果如下： 这是一个脚注的例子[1] 常用弥补Markdown的Html标签字体12&lt;font face=&quot;微软雅黑&quot; color=&quot;red&quot; size=&quot;6&quot;&gt;字体及字体颜色和大小&lt;/font&gt;&lt;font color=&quot;#0000ff&quot;&gt;字体颜色&lt;/font&gt; 效果如下： 字体及字体颜色和大小 字体颜色 换行1使用html标签`&lt;br/&gt;`&lt;br/&gt;换行 效果如下： 使用html标签&lt;br/&gt;换行 文本对齐方式123&lt;p align=&quot;left&quot;&gt;居左文本&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;居中文本&lt;/p&gt;&lt;p align=&quot;right&quot;&gt;居右文本&lt;/p&gt; 效果如下： 居左文本 居中文本 居右文本 下划线1&lt;u&gt;下划线文本&lt;/u&gt; 效果如下： 下划线文本 That’s all, Enjoy it! 这里是脚注 ↩]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu平台Hexo安装]]></title>
    <url>%2Farticle%2FUnderUbuntuInstallHexo.html</url>
    <content type="text"><![CDATA[安装node.js12curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -sudo apt-get install nodejs 将官方源替换为淘宝源12sudo npm install -g cnpm --registry=https://registry.npm.taobao.orgsudo cnpm install -g hexo-cli 初始化123hexo init 文件夹的名字(假设为BLOG)cd BLOGnpm install //安装依赖 Git配置发布123456hexo new post "newPost"hexo c //clean, 清空generate生成器的文件hexo g //generate ,编译成静态文件hexo d //deploy, 部署网站 hexo s //server, 本地运行]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Ubuntu</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
</search>
